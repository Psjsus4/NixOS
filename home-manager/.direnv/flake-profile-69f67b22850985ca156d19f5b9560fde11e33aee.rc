unset shellHook
PATH=${PATH:-}
nix_saved_PATH="$PATH"
XDG_DATA_DIRS=${XDG_DATA_DIRS:-}
nix_saved_XDG_DATA_DIRS="$XDG_DATA_DIRS"
BASH='/nix/store/mm0pa3z7kk6jh1i9rkxqxjqmd8h1qpxf-bash-5.2p37/bin/bash'
CONFIG_SHELL='/nix/store/mm0pa3z7kk6jh1i9rkxqxjqmd8h1qpxf-bash-5.2p37/bin/bash'
export CONFIG_SHELL
DETERMINISTIC_BUILD='1'
export DETERMINISTIC_BUILD
HOSTTYPE='x86_64'
HOST_PATH='/nix/store/jyfdlb0lm2nr180bfa5l2bsnaq1y1gb5-capstone-5.0.1/bin:/nix/store/ydv2ia3gf0j0r1gy51d5z9rlxv4fmbsm-file-5.45/bin:/nix/store/kbwfxd5b17iy077yjvqdfrvwn0npp6vw-ncurses-6.4.20221231-dev/bin:/nix/store/c7qx9iq6lqfjd4dxrdd6723l6rvzsj5s-ncurses-6.4.20221231/bin:/nix/store/rf0rvd79mdhy427nv1wv9shkc9nglijz-readline-8.2p13/bin:/nix/store/vnh2m6fyk3q9zs6h2mr160wr7ixwgvyp-libusb-compat-0.1.8-dev/bin:/nix/store/qaggzhjjkk71jdd0pi8ad17q25dxi56r-libewf-20231119/bin:/nix/store/pg37w2gymgf5rdlp00c3jn7hw37bnmyc-perl-5.40.0/bin:/nix/store/9x40a20if2q28m96hlw3q5z5q5ajgpgp-openssl-3.3.2-bin/bin:/nix/store/d1hh5c7kz3b3djajclfw25bw6pcdsmcy-lz4-1.10.0/bin:/nix/store/901c80rlps5q05bnjk1sj4zaz5k736nc-python3-3.12.7/bin:/nix/store/njj1j8klzs8m7zc45n363hq138p84bg4-python3.12-pygments-2.18.0/bin:/nix/store/j8rn4cdj97xnfgzak8y0gqrn7sn1fsj1-python3.12-mako-1.3.5/bin:/nix/store/spa9vzcw99a2ck7hps1m1c241bzfvjbs-python3.12-pyelftools-0.31/bin:/nix/store/c2mfcz9x88qdkzbdg66nwaz4s4hh5fji-python3.12-pyserial-3.5/bin:/nix/store/3d8jh19l44g0aal4vclry3ivrjrkpv6c-python3.12-charset-normalizer-3.3.2/bin:/nix/store/f218gqr05ma97a196vwv17svjj2r71jj-python3.12-ropgadget-7.5/bin:/nix/store/aq65zh55qp6lj94n99ipijax5jdd9b0d-python3.12-rpyc-6.0.1/bin:/nix/store/piv1hw8fwahj3g6dzqgxp1v60xf2g1qx-libzip-1.11.1/bin:/nix/store/zhhanmr3qmhw1ygg02f3412y1c7yirww-xxHash-0.8.2/bin:/nix/store/sf6y4arqcm100rnnl3dhpg732i774zp6-coreutils-9.5/bin:/nix/store/psjqqbj19n3fqssn38hgz4cv7b7a9alp-findutils-4.10.0/bin:/nix/store/alq4bqllykgwrif112yqgrn9g001kn7b-diffutils-3.10/bin:/nix/store/13wxcn0j2wk911ahfkbvdq241rkprsv8-gnused-4.9/bin:/nix/store/nysgss3ggh3dv7mz08n28h29lazxhyc1-gnugrep-3.11/bin:/nix/store/1cd3p3kjh9c209s7832z8i3b8qcqggca-gawk-5.3.1/bin:/nix/store/cqyjb712c5q3axw9qjij05dnji2a7z48-gnutar-1.35/bin:/nix/store/qfc6wq1wpxvkkjqa6xr5685ip97qc3sr-gzip-1.13/bin:/nix/store/0kxxaix9l5dbih90491mv96zajsac57q-bzip2-1.0.8-bin/bin:/nix/store/iyrpqn6ana7j804dzis338n74kzznmj0-gnumake-4.4.1/bin:/nix/store/mm0pa3z7kk6jh1i9rkxqxjqmd8h1qpxf-bash-5.2p37/bin:/nix/store/3yv1shg4kg4ifkxzg2jgjsrrrd8s1w08-patch-2.7.6/bin:/nix/store/g0ih6cb93dm4n18bah982gsmayah3amy-xz-5.6.3-bin/bin:/nix/store/vkv9a83hknlnr7p2z8mwl16j5pb502gp-file-5.45/bin'
export HOST_PATH
IFS=' 	
'
IN_NIX_SHELL='impure'
export IN_NIX_SHELL
LINENO='76'
MACHTYPE='x86_64-pc-linux-gnu'
NIX_BUILD_CORES='16'
export NIX_BUILD_CORES
NIX_CFLAGS_COMPILE=' -frandom-seed=7rvmfa90jk'
export NIX_CFLAGS_COMPILE
NIX_ENFORCE_NO_NATIVE='1'
export NIX_ENFORCE_NO_NATIVE
NIX_LDFLAGS='-rpath /home/darktar/.config/nixos/home-manager/outputs/out/lib '
export NIX_LDFLAGS
NIX_NO_SELF_RPATH='1'
NIX_PKG_CONFIG_WRAPPER_TARGET_HOST_x86_64_unknown_linux_gnu='1'
export NIX_PKG_CONFIG_WRAPPER_TARGET_HOST_x86_64_unknown_linux_gnu
NIX_SSL_CERT_FILE='/nix/store/mqvcvn7vpzsrihgj3ph39mbvyyj435bc-nss-cacert-3.104/etc/ssl/certs/ca-bundle.crt'
export NIX_SSL_CERT_FILE
NIX_STORE='/nix/store'
export NIX_STORE
OLDPWD=''
export OLDPWD
OPTERR='1'
OSTYPE='linux-gnu'
PATH='/nix/store/68d84dr0yc1q4gcq3l12gwwzvdp9p7p7-python3-3.12.7-env/bin:/nix/store/fyp3i7n26g39qzp6cjlz6hxnwr8j70xp-python3-3.11.10-env/bin:/nix/store/301lhjnfkr1mhcsqva0km9b4g9pl5ihx-radare2-5.9.6/bin:/nix/store/ydv2ia3gf0j0r1gy51d5z9rlxv4fmbsm-file-5.45/bin:/nix/store/piv1hw8fwahj3g6dzqgxp1v60xf2g1qx-libzip-1.11.1/bin:/nix/store/zhhanmr3qmhw1ygg02f3412y1c7yirww-xxHash-0.8.2/bin:/nix/store/901c80rlps5q05bnjk1sj4zaz5k736nc-python3-3.12.7/bin:/nix/store/zmbqi7bnv6sfhdnachi6mgl5cb2vxw9k-python3.12-wheel-0.44.0/bin:/nix/store/946chn5ja4yrvnnc5izwv792cc57xpy8-pkg-config-wrapper-0.29.2/bin:/nix/store/2lz53rq9060dn931a344bi72xhk103xq-meson-1.5.2/bin:/nix/store/m5d2zsm9252fdr825lahyqxpn2av8136-ninja-1.12.1/bin:/nix/store/r9gxdanbg938b9vimis7akyawkyb0yax-patchelf-0.15.0/bin:/nix/store/jyfdlb0lm2nr180bfa5l2bsnaq1y1gb5-capstone-5.0.1/bin:/nix/store/kbwfxd5b17iy077yjvqdfrvwn0npp6vw-ncurses-6.4.20221231-dev/bin:/nix/store/c7qx9iq6lqfjd4dxrdd6723l6rvzsj5s-ncurses-6.4.20221231/bin:/nix/store/rf0rvd79mdhy427nv1wv9shkc9nglijz-readline-8.2p13/bin:/nix/store/vnh2m6fyk3q9zs6h2mr160wr7ixwgvyp-libusb-compat-0.1.8-dev/bin:/nix/store/qaggzhjjkk71jdd0pi8ad17q25dxi56r-libewf-20231119/bin:/nix/store/pg37w2gymgf5rdlp00c3jn7hw37bnmyc-perl-5.40.0/bin:/nix/store/9x40a20if2q28m96hlw3q5z5q5ajgpgp-openssl-3.3.2-bin/bin:/nix/store/d1hh5c7kz3b3djajclfw25bw6pcdsmcy-lz4-1.10.0/bin:/nix/store/njj1j8klzs8m7zc45n363hq138p84bg4-python3.12-pygments-2.18.0/bin:/nix/store/j8rn4cdj97xnfgzak8y0gqrn7sn1fsj1-python3.12-mako-1.3.5/bin:/nix/store/spa9vzcw99a2ck7hps1m1c241bzfvjbs-python3.12-pyelftools-0.31/bin:/nix/store/c2mfcz9x88qdkzbdg66nwaz4s4hh5fji-python3.12-pyserial-3.5/bin:/nix/store/3d8jh19l44g0aal4vclry3ivrjrkpv6c-python3.12-charset-normalizer-3.3.2/bin:/nix/store/f218gqr05ma97a196vwv17svjj2r71jj-python3.12-ropgadget-7.5/bin:/nix/store/aq65zh55qp6lj94n99ipijax5jdd9b0d-python3.12-rpyc-6.0.1/bin:/nix/store/sf6y4arqcm100rnnl3dhpg732i774zp6-coreutils-9.5/bin:/nix/store/psjqqbj19n3fqssn38hgz4cv7b7a9alp-findutils-4.10.0/bin:/nix/store/alq4bqllykgwrif112yqgrn9g001kn7b-diffutils-3.10/bin:/nix/store/13wxcn0j2wk911ahfkbvdq241rkprsv8-gnused-4.9/bin:/nix/store/nysgss3ggh3dv7mz08n28h29lazxhyc1-gnugrep-3.11/bin:/nix/store/1cd3p3kjh9c209s7832z8i3b8qcqggca-gawk-5.3.1/bin:/nix/store/cqyjb712c5q3axw9qjij05dnji2a7z48-gnutar-1.35/bin:/nix/store/qfc6wq1wpxvkkjqa6xr5685ip97qc3sr-gzip-1.13/bin:/nix/store/0kxxaix9l5dbih90491mv96zajsac57q-bzip2-1.0.8-bin/bin:/nix/store/iyrpqn6ana7j804dzis338n74kzznmj0-gnumake-4.4.1/bin:/nix/store/mm0pa3z7kk6jh1i9rkxqxjqmd8h1qpxf-bash-5.2p37/bin:/nix/store/3yv1shg4kg4ifkxzg2jgjsrrrd8s1w08-patch-2.7.6/bin:/nix/store/g0ih6cb93dm4n18bah982gsmayah3amy-xz-5.6.3-bin/bin:/nix/store/vkv9a83hknlnr7p2z8mwl16j5pb502gp-file-5.45/bin'
export PATH
PERL5LIB='/nix/store/pg37w2gymgf5rdlp00c3jn7hw37bnmyc-perl-5.40.0/lib/perl5/site_perl'
export PERL5LIB
PKG_CONFIG='pkg-config'
export PKG_CONFIG
PKG_CONFIG_PATH='/nix/store/68d84dr0yc1q4gcq3l12gwwzvdp9p7p7-python3-3.12.7-env/lib/pkgconfig:/nix/store/fyp3i7n26g39qzp6cjlz6hxnwr8j70xp-python3-3.11.10-env/lib/pkgconfig:/nix/store/301lhjnfkr1mhcsqva0km9b4g9pl5ihx-radare2-5.9.6/lib/pkgconfig:/nix/store/yad519r64n37pwnwsd0z64qkd1b3l66b-file-5.45-dev/lib/pkgconfig:/nix/store/q598qvf0s3n81x5xmr67zs305pxrpzgg-libzip-1.11.1-dev/lib/pkgconfig:/nix/store/cir85maag3aj3sddq35y59m0wmcr50wk-zlib-1.3.1-dev/lib/pkgconfig:/nix/store/zhhanmr3qmhw1ygg02f3412y1c7yirww-xxHash-0.8.2/lib/pkgconfig:/nix/store/901c80rlps5q05bnjk1sj4zaz5k736nc-python3-3.12.7/lib/pkgconfig:/nix/store/jyfdlb0lm2nr180bfa5l2bsnaq1y1gb5-capstone-5.0.1/lib/pkgconfig:/nix/store/q7kklqkq2a8y0vpr9sdrzfx8d9n94ysa-readline-8.2p13-dev/lib/pkgconfig:/nix/store/kbwfxd5b17iy077yjvqdfrvwn0npp6vw-ncurses-6.4.20221231-dev/lib/pkgconfig:/nix/store/vnh2m6fyk3q9zs6h2mr160wr7ixwgvyp-libusb-compat-0.1.8-dev/lib/pkgconfig:/nix/store/qaggzhjjkk71jdd0pi8ad17q25dxi56r-libewf-20231119/lib/pkgconfig:/nix/store/3nkb6rscay1w5ky9xziy7qnjl0i4dx25-libxcrypt-4.4.36/lib/pkgconfig:/nix/store/xm6d1ig9ff7zkid1gvzsbig45m2pnlaz-openssl-3.3.2-dev/lib/pkgconfig:/nix/store/8cxyn5lwjcvvjzxb856xpn640535lfk2-libuv-1.48.0-dev/lib/pkgconfig:/nix/store/sj4wz8d69b76khsy7y3ddp759vb1w7ym-lz4-1.10.0-dev/lib/pkgconfig'
export PKG_CONFIG_PATH
PS4='+ '
PYTHONHASHSEED='0'
export PYTHONHASHSEED
PYTHONNOUSERSITE='1'
export PYTHONNOUSERSITE
PYTHONPATH='/nix/store/68d84dr0yc1q4gcq3l12gwwzvdp9p7p7-python3-3.12.7-env/lib/python3.12/site-packages:/nix/store/901c80rlps5q05bnjk1sj4zaz5k736nc-python3-3.12.7/lib/python3.12/site-packages:/nix/store/zmbqi7bnv6sfhdnachi6mgl5cb2vxw9k-python3.12-wheel-0.44.0/lib/python3.12/site-packages:/nix/store/3w24hxn0jrhc1z6yvq0nc59209bpw4fw-python3.12-packaging-24.1/lib/python3.12/site-packages:/nix/store/93492kzz2a4hk4jn9zclrfqmr1w81gl6-python3.12-installer-0.7.0/lib/python3.12/site-packages:/nix/store/nxgx33hs40fc9qrrn3y9g4wv0db8pmhy-python3.12-setuptools-75.1.0/lib/python3.12/site-packages:/nix/store/2lz53rq9060dn931a344bi72xhk103xq-meson-1.5.2/lib/python3.12/site-packages:/nix/store/r0lkjnq9bygajpch2qmy1hrvkpsabs8g-python3.12-cffi-1.17.1/lib/python3.12/site-packages:/nix/store/n303fisfpb47mjm37iacp3vyqq7zdk0d-python3.12-pycparser-2.22/lib/python3.12/site-packages:/nix/store/852jps5qc5xy46w37kcxi7cynipwqmp7-python3.12-capstone-5.0.1/lib/python3.12/site-packages:/nix/store/12ymmp3ln3slhdzfrj131qvlmnbbygg1-python3.12-colored-traceback-0.4.2/lib/python3.12/site-packages:/nix/store/njj1j8klzs8m7zc45n363hq138p84bg4-python3.12-pygments-2.18.0/lib/python3.12/site-packages:/nix/store/4b6milcm7c5szvs17xxhnppnxx4amaz6-python3.12-intervaltree-3.1.0/lib/python3.12/site-packages:/nix/store/ji3d72vkqb0mk56kgdf7bagg2nhp9qdq-python3.12-sortedcontainers-2.4.0/lib/python3.12/site-packages:/nix/store/j8rn4cdj97xnfgzak8y0gqrn7sn1fsj1-python3.12-mako-1.3.5/lib/python3.12/site-packages:/nix/store/q2fw36zpzpyd28hxpshmc6b06psd7bvh-python3.12-markupsafe-3.0.1/lib/python3.12/site-packages:/nix/store/mswq6hxgva7m876490v7c4cfphsilsyj-python3.12-paramiko-3.5.0/lib/python3.12/site-packages:/nix/store/1ifagjr5dmw7p7sdp3akq8nh3ky1gga2-python3.12-bcrypt-4.2.0/lib/python3.12/site-packages:/nix/store/k78wn48njw17avlsviyi83z5facg9fxp-python3.12-cryptography-43.0.1/lib/python3.12/site-packages:/nix/store/djcnmnrlkyfaf83xfvz6s0ga28vxzfim-python3.12-pynacl-1.5.0/lib/python3.12/site-packages:/nix/store/zzaanfpx5rzzwszdi96ms79sc04d1rvq-python3.12-psutil-6.0.0/lib/python3.12/site-packages:/nix/store/spa9vzcw99a2ck7hps1m1c241bzfvjbs-python3.12-pyelftools-0.31/lib/python3.12/site-packages:/nix/store/c2mfcz9x88qdkzbdg66nwaz4s4hh5fji-python3.12-pyserial-3.5/lib/python3.12/site-packages:/nix/store/4yyba8yllw1hq4w4w1g19k4xmvjzvmba-python3.12-pysocks-1.7.1/lib/python3.12/site-packages:/nix/store/qw0zfbf4gad249zxzzvy67y27qzwilwr-python3.12-python-dateutil-2.9.0.post0/lib/python3.12/site-packages:/nix/store/cvzpns36fhpd6j2sh759i71kia7jmras-python3.12-six-1.16.0/lib/python3.12/site-packages:/nix/store/l4y7mm2d1dnybyym01b4032h4gji221p-python3.12-requests-2.32.3/lib/python3.12/site-packages:/nix/store/phxp28l7dcb9342aafr1ma7a32payly7-python3.12-brotlicffi-1.1.0.0/lib/python3.12/site-packages:/nix/store/2jgmq8i2p9z64gf3zrx1ba0n917nf15i-python3.12-certifi-2024.08.30/lib/python3.12/site-packages:/nix/store/3d8jh19l44g0aal4vclry3ivrjrkpv6c-python3.12-charset-normalizer-3.3.2/lib/python3.12/site-packages:/nix/store/gd41v3r4j5y0srkj0n4cpggcxvyngap5-python3.12-idna-3.10/lib/python3.12/site-packages:/nix/store/avkdkdhnb136l7scx4bnhjmnycfbjsl0-python3.12-urllib3-2.2.3/lib/python3.12/site-packages:/nix/store/f218gqr05ma97a196vwv17svjj2r71jj-python3.12-ropgadget-7.5/lib/python3.12/site-packages:/nix/store/aq65zh55qp6lj94n99ipijax5jdd9b0d-python3.12-rpyc-6.0.1/lib/python3.12/site-packages:/nix/store/1kjj5r0jxbxpf85jy82mrv666dw9dpzq-python3.12-plumbum-1.9.0/lib/python3.12/site-packages:/nix/store/lkq2nh7xl1akijjdmlbsfg9kky9231q4-python3.12-unicorn-2.1.1/lib/python3.12/site-packages:/nix/store/m187nw6a147n4qixxf1saimk3ywp5dpp-python3.12-unix-ar-0.2.1/lib/python3.12/site-packages:/nix/store/3yaa8q818pp9dxynafhlmpk14qbwk2c9-python3.12-zstandard-0.23.0/lib/python3.12/site-packages'
export PYTHONPATH
SHELL='/nix/store/mm0pa3z7kk6jh1i9rkxqxjqmd8h1qpxf-bash-5.2p37/bin/bash'
export SHELL
SOURCE_DATE_EPOCH='315532800'
export SOURCE_DATE_EPOCH
SYSTEM_CERTIFICATE_PATH='/nix/store/mqvcvn7vpzsrihgj3ph39mbvyyj435bc-nss-cacert-3.104/etc/ssl/certs/ca-bundle.crt'
export SYSTEM_CERTIFICATE_PATH
XDG_DATA_DIRS='/nix/store/68d84dr0yc1q4gcq3l12gwwzvdp9p7p7-python3-3.12.7-env/share:/nix/store/fyp3i7n26g39qzp6cjlz6hxnwr8j70xp-python3-3.11.10-env/share:/nix/store/301lhjnfkr1mhcsqva0km9b4g9pl5ihx-radare2-5.9.6/share:/nix/store/ydv2ia3gf0j0r1gy51d5z9rlxv4fmbsm-file-5.45/share:/nix/store/ncjma3lhr1sf6mqaczl9mfhjmp6ix58w-zlib-1.3.1/share:/nix/store/zhhanmr3qmhw1ygg02f3412y1c7yirww-xxHash-0.8.2/share:/nix/store/901c80rlps5q05bnjk1sj4zaz5k736nc-python3-3.12.7/share:/nix/store/946chn5ja4yrvnnc5izwv792cc57xpy8-pkg-config-wrapper-0.29.2/share:/nix/store/2lz53rq9060dn931a344bi72xhk103xq-meson-1.5.2/share:/nix/store/m5d2zsm9252fdr825lahyqxpn2av8136-ninja-1.12.1/share:/nix/store/r9gxdanbg938b9vimis7akyawkyb0yax-patchelf-0.15.0/share'
export XDG_DATA_DIRS
_PYTHON_HOST_PLATFORM='linux-x86_64'
export _PYTHON_HOST_PLATFORM
_PYTHON_SYSCONFIGDATA_NAME='_sysconfigdata__linux_x86_64-linux-gnu'
export _PYTHON_SYSCONFIGDATA_NAME
__structuredAttrs=''
export __structuredAttrs
_substituteStream_has_warned_replace_deprecation='false'
buildInputs='/nix/store/jyfdlb0lm2nr180bfa5l2bsnaq1y1gb5-capstone-5.0.1 /nix/store/yad519r64n37pwnwsd0z64qkd1b3l66b-file-5.45-dev /nix/store/q7kklqkq2a8y0vpr9sdrzfx8d9n94ysa-readline-8.2p13-dev /nix/store/vnh2m6fyk3q9zs6h2mr160wr7ixwgvyp-libusb-compat-0.1.8-dev /nix/store/qaggzhjjkk71jdd0pi8ad17q25dxi56r-libewf-20231119 /nix/store/pg37w2gymgf5rdlp00c3jn7hw37bnmyc-perl-5.40.0 /nix/store/cir85maag3aj3sddq35y59m0wmcr50wk-zlib-1.3.1-dev /nix/store/xm6d1ig9ff7zkid1gvzsbig45m2pnlaz-openssl-3.3.2-dev /nix/store/8cxyn5lwjcvvjzxb856xpn640535lfk2-libuv-1.48.0-dev /nix/store/sj4wz8d69b76khsy7y3ddp759vb1w7ym-lz4-1.10.0-dev'
export buildInputs
buildPhase='{ echo "------------------------------------------------------------";
  echo " WARNING: the existence of this path is not guaranteed.";
  echo " It is an internal implementation detail for pkgs.mkShell.";
  echo "------------------------------------------------------------";
  echo;
  # Record all build inputs as runtime dependencies
  export;
} >> "$out"
'
export buildPhase
builder='/nix/store/mm0pa3z7kk6jh1i9rkxqxjqmd8h1qpxf-bash-5.2p37/bin/bash'
export builder
checkPhase='ninjaCheckPhase'
cmakeFlags=''
export cmakeFlags
configureFlags=''
export configureFlags
configurePhase='mesonConfigurePhase'
defaultBuildInputs=''
defaultNativeBuildInputs='/nix/store/r9gxdanbg938b9vimis7akyawkyb0yax-patchelf-0.15.0 /nix/store/7hsml574k621n842nwnl8qhix3i2q6mv-update-autotools-gnu-config-scripts-hook /nix/store/h9lc1dpi14z7is86ffhl3ld569138595-audit-tmpdir.sh /nix/store/m54bmrhj6fqz8nds5zcj97w9s9bckc9v-compress-man-pages.sh /nix/store/wgrbkkaldkrlrni33ccvm3b6vbxzb656-make-symlinks-relative.sh /nix/store/5yzw0vhkyszf2d179m0qfkgxmp5wjjx4-move-docs.sh /nix/store/fyaryjvghbkpfnsyw97hb3lyb37s1pd6-move-lib64.sh /nix/store/kd4xwxjpjxi71jkm6ka0np72if9rm3y0-move-sbin.sh /nix/store/pag6l61paj1dc9sv15l7bm5c17xn5kyk-move-systemd-user-units.sh /nix/store/jivxp510zxakaaic7qkrb7v1dd2rdbw9-multiple-outputs.sh /nix/store/12lvf0c7xric9cny7slvf9cmhypl1p67-patch-shebangs.sh /nix/store/cickvswrvann041nqxb0rxilc46svw1n-prune-libtool-files.sh /nix/store/xyff06pkhki3qy1ls77w10s0v79c9il0-reproducible-builds.sh /nix/store/aazf105snicrlvyzzbdj85sx4179rpfp-set-source-date-epoch-to-latest.sh /nix/store/gps9qrh99j7g02840wv5x78ykmz30byp-strip.sh'
depsBuildBuild=''
export depsBuildBuild
depsBuildBuildPropagated=''
export depsBuildBuildPropagated
depsBuildTarget=''
export depsBuildTarget
depsBuildTargetPropagated=''
export depsBuildTargetPropagated
depsHostHost=''
export depsHostHost
depsHostHostPropagated=''
export depsHostHostPropagated
depsTargetTarget=''
export depsTargetTarget
depsTargetTargetPropagated=''
export depsTargetTargetPropagated
doCheck=''
export doCheck
doInstallCheck=''
export doInstallCheck
dontAddDisableDepTrack='1'
export dontAddDisableDepTrack
declare -a envBuildBuildHooks=('addPythonPath' 'sysconfigdataHook' )
declare -a envBuildHostHooks=('addPythonPath' 'sysconfigdataHook' )
declare -a envBuildTargetHooks=('addPythonPath' 'sysconfigdataHook' )
declare -a envHostHostHooks=('pkgConfigWrapper_addPkgConfigPath' 'addPerlLibPath' 'addPythonPath' 'sysconfigdataHook' 'addPythonPath' 'sysconfigdataHook' )
declare -a envHostTargetHooks=('pkgConfigWrapper_addPkgConfigPath' 'addPerlLibPath' 'addPythonPath' 'sysconfigdataHook' 'addPythonPath' 'sysconfigdataHook' )
declare -a envTargetTargetHooks=()
declare -a fixupOutputHooks=('if [ -z "${dontPatchELF-}" ]; then patchELF "$prefix"; fi' 'if [[ -z "${noAuditTmpdir-}" && -e "$prefix" ]]; then auditTmpdir "$prefix"; fi' 'if [ -z "${dontGzipMan-}" ]; then compressManPages "$prefix"; fi' '_moveLib64' '_moveSbin' '_moveSystemdUserUnits' 'patchShebangsAuto' '_pruneLibtoolFiles' '_doStrip' )
guess='16'
initialPath='/nix/store/sf6y4arqcm100rnnl3dhpg732i774zp6-coreutils-9.5 /nix/store/psjqqbj19n3fqssn38hgz4cv7b7a9alp-findutils-4.10.0 /nix/store/alq4bqllykgwrif112yqgrn9g001kn7b-diffutils-3.10 /nix/store/13wxcn0j2wk911ahfkbvdq241rkprsv8-gnused-4.9 /nix/store/nysgss3ggh3dv7mz08n28h29lazxhyc1-gnugrep-3.11 /nix/store/1cd3p3kjh9c209s7832z8i3b8qcqggca-gawk-5.3.1 /nix/store/cqyjb712c5q3axw9qjij05dnji2a7z48-gnutar-1.35 /nix/store/qfc6wq1wpxvkkjqa6xr5685ip97qc3sr-gzip-1.13 /nix/store/0kxxaix9l5dbih90491mv96zajsac57q-bzip2-1.0.8-bin /nix/store/iyrpqn6ana7j804dzis338n74kzznmj0-gnumake-4.4.1 /nix/store/mm0pa3z7kk6jh1i9rkxqxjqmd8h1qpxf-bash-5.2p37 /nix/store/3yv1shg4kg4ifkxzg2jgjsrrrd8s1w08-patch-2.7.6 /nix/store/g0ih6cb93dm4n18bah982gsmayah3amy-xz-5.6.3-bin /nix/store/vkv9a83hknlnr7p2z8mwl16j5pb502gp-file-5.45'
installPhase='pypaInstallPhase'
mesonFlags=''
export mesonFlags
name='nix-shell-env'
export name
nativeBuildInputs='/nix/store/68d84dr0yc1q4gcq3l12gwwzvdp9p7p7-python3-3.12.7-env /nix/store/fyp3i7n26g39qzp6cjlz6hxnwr8j70xp-python3-3.11.10-env /nix/store/301lhjnfkr1mhcsqva0km9b4g9pl5ihx-radare2-5.9.6 /nix/store/901c80rlps5q05bnjk1sj4zaz5k736nc-python3-3.12.7 /nix/store/xflf24rhv7rgslrfmc608wq437afsnvv-wrap-python-hook /nix/store/slv7k0g5dx4wiiwdvgpg8rcbfsb9vxqb-ensure-newer-sources-hook /nix/store/c6qhjiygxw3chfbjxk7bzzsiv4h4d5yb-python-remove-tests-dir-hook /nix/store/jhcws60l0dq8bklq668mhsiz9dfj5yik-python-catch-conflicts-hook /nix/store/4wxmbjk1xdgjpw2ng5382vbh2w91jg7j-python-relax-deps-hook /nix/store/b7dh25plllxyvz85lv0dr1zd0714sza2-python-remove-bin-bytecode-hook /nix/store/42xqg04s12m93ypy1hqi87p7isbfr1m9-pypa-build-hook.sh /nix/store/443xgrl73njyz78ljx7nk3283lc42348-python-runtime-deps-check-hook.sh /nix/store/2q4kvxhqkbn3dyz4jfbhqpcmlwf599r5-pypa-install-hook /nix/store/0qbhzvl9xnmrsrav5jikl7s2pa3z3raz-python-imports-check-hook.sh /nix/store/hwf8pya6vis8z4vp04wxqbnpf682sg7q-python-namespaces-hook.sh /nix/store/wqp7nhknv40qgxwkzb93bk3381lprr7y-python-output-dist-hook /nix/store/2lc0sdfb7lmich5a8mxq7cybqs7ary1k-install-shell-files /nix/store/nxgx33hs40fc9qrrn3y9g4wv0db8pmhy-python3.12-setuptools-75.1.0 /nix/store/h6nfn9199lssr5f15dgjjgaw7ai60jz8-make-shell-wrapper-hook /nix/store/946chn5ja4yrvnnc5izwv792cc57xpy8-pkg-config-wrapper-0.29.2 /nix/store/2lz53rq9060dn931a344bi72xhk103xq-meson-1.5.2 /nix/store/m5d2zsm9252fdr825lahyqxpn2av8136-ninja-1.12.1 /nix/store/901c80rlps5q05bnjk1sj4zaz5k736nc-python3-3.12.7'
export nativeBuildInputs
out='/home/darktar/.config/nixos/home-manager/outputs/out'
export out
outputBin='out'
outputDev='out'
outputDevdoc='REMOVE'
outputDevman='out'
outputDoc='out'
outputInclude='out'
outputInfo='out'
outputLib='out'
outputMan='out'
outputs='out'
export outputs
patches=''
export patches
phases='buildPhase'
export phases
pkg='/nix/store/gps9qrh99j7g02840wv5x78ykmz30byp-strip.sh'
declare -a pkgsBuildBuild=()
declare -a pkgsBuildHost=('/nix/store/68d84dr0yc1q4gcq3l12gwwzvdp9p7p7-python3-3.12.7-env' '/nix/store/fyp3i7n26g39qzp6cjlz6hxnwr8j70xp-python3-3.11.10-env' '/nix/store/301lhjnfkr1mhcsqva0km9b4g9pl5ihx-radare2-5.9.6' '/nix/store/yad519r64n37pwnwsd0z64qkd1b3l66b-file-5.45-dev' '/nix/store/ydv2ia3gf0j0r1gy51d5z9rlxv4fmbsm-file-5.45' '/nix/store/q598qvf0s3n81x5xmr67zs305pxrpzgg-libzip-1.11.1-dev' '/nix/store/cir85maag3aj3sddq35y59m0wmcr50wk-zlib-1.3.1-dev' '/nix/store/ncjma3lhr1sf6mqaczl9mfhjmp6ix58w-zlib-1.3.1' '/nix/store/piv1hw8fwahj3g6dzqgxp1v60xf2g1qx-libzip-1.11.1' '/nix/store/zhhanmr3qmhw1ygg02f3412y1c7yirww-xxHash-0.8.2' '/nix/store/901c80rlps5q05bnjk1sj4zaz5k736nc-python3-3.12.7' '/nix/store/xflf24rhv7rgslrfmc608wq437afsnvv-wrap-python-hook' '/nix/store/h6nfn9199lssr5f15dgjjgaw7ai60jz8-make-shell-wrapper-hook' '/nix/store/fxapb0kr84gjcc71kr3i5ik9h52xkya5-die-hook' '/nix/store/slv7k0g5dx4wiiwdvgpg8rcbfsb9vxqb-ensure-newer-sources-hook' '/nix/store/c6qhjiygxw3chfbjxk7bzzsiv4h4d5yb-python-remove-tests-dir-hook' '/nix/store/jhcws60l0dq8bklq668mhsiz9dfj5yik-python-catch-conflicts-hook' '/nix/store/4wxmbjk1xdgjpw2ng5382vbh2w91jg7j-python-relax-deps-hook' '/nix/store/b7dh25plllxyvz85lv0dr1zd0714sza2-python-remove-bin-bytecode-hook' '/nix/store/42xqg04s12m93ypy1hqi87p7isbfr1m9-pypa-build-hook.sh' '/nix/store/zmbqi7bnv6sfhdnachi6mgl5cb2vxw9k-python3.12-wheel-0.44.0' '/nix/store/443xgrl73njyz78ljx7nk3283lc42348-python-runtime-deps-check-hook.sh' '/nix/store/3w24hxn0jrhc1z6yvq0nc59209bpw4fw-python3.12-packaging-24.1' '/nix/store/2q4kvxhqkbn3dyz4jfbhqpcmlwf599r5-pypa-install-hook' '/nix/store/93492kzz2a4hk4jn9zclrfqmr1w81gl6-python3.12-installer-0.7.0' '/nix/store/0qbhzvl9xnmrsrav5jikl7s2pa3z3raz-python-imports-check-hook.sh' '/nix/store/hwf8pya6vis8z4vp04wxqbnpf682sg7q-python-namespaces-hook.sh' '/nix/store/wqp7nhknv40qgxwkzb93bk3381lprr7y-python-output-dist-hook' '/nix/store/2lc0sdfb7lmich5a8mxq7cybqs7ary1k-install-shell-files' '/nix/store/nxgx33hs40fc9qrrn3y9g4wv0db8pmhy-python3.12-setuptools-75.1.0' '/nix/store/946chn5ja4yrvnnc5izwv792cc57xpy8-pkg-config-wrapper-0.29.2' '/nix/store/2lz53rq9060dn931a344bi72xhk103xq-meson-1.5.2' '/nix/store/m5d2zsm9252fdr825lahyqxpn2av8136-ninja-1.12.1' '/nix/store/r0lkjnq9bygajpch2qmy1hrvkpsabs8g-python3.12-cffi-1.17.1' '/nix/store/n303fisfpb47mjm37iacp3vyqq7zdk0d-python3.12-pycparser-2.22' '/nix/store/mqvcvn7vpzsrihgj3ph39mbvyyj435bc-nss-cacert-3.104' '/nix/store/r9gxdanbg938b9vimis7akyawkyb0yax-patchelf-0.15.0' '/nix/store/7hsml574k621n842nwnl8qhix3i2q6mv-update-autotools-gnu-config-scripts-hook' '/nix/store/h9lc1dpi14z7is86ffhl3ld569138595-audit-tmpdir.sh' '/nix/store/m54bmrhj6fqz8nds5zcj97w9s9bckc9v-compress-man-pages.sh' '/nix/store/wgrbkkaldkrlrni33ccvm3b6vbxzb656-make-symlinks-relative.sh' '/nix/store/5yzw0vhkyszf2d179m0qfkgxmp5wjjx4-move-docs.sh' '/nix/store/fyaryjvghbkpfnsyw97hb3lyb37s1pd6-move-lib64.sh' '/nix/store/kd4xwxjpjxi71jkm6ka0np72if9rm3y0-move-sbin.sh' '/nix/store/pag6l61paj1dc9sv15l7bm5c17xn5kyk-move-systemd-user-units.sh' '/nix/store/jivxp510zxakaaic7qkrb7v1dd2rdbw9-multiple-outputs.sh' '/nix/store/12lvf0c7xric9cny7slvf9cmhypl1p67-patch-shebangs.sh' '/nix/store/cickvswrvann041nqxb0rxilc46svw1n-prune-libtool-files.sh' '/nix/store/xyff06pkhki3qy1ls77w10s0v79c9il0-reproducible-builds.sh' '/nix/store/aazf105snicrlvyzzbdj85sx4179rpfp-set-source-date-epoch-to-latest.sh' '/nix/store/gps9qrh99j7g02840wv5x78ykmz30byp-strip.sh' )
declare -a pkgsBuildTarget=()
declare -a pkgsHostHost=()
declare -a pkgsHostTarget=('/nix/store/jyfdlb0lm2nr180bfa5l2bsnaq1y1gb5-capstone-5.0.1' '/nix/store/yad519r64n37pwnwsd0z64qkd1b3l66b-file-5.45-dev' '/nix/store/ydv2ia3gf0j0r1gy51d5z9rlxv4fmbsm-file-5.45' '/nix/store/q7kklqkq2a8y0vpr9sdrzfx8d9n94ysa-readline-8.2p13-dev' '/nix/store/kbwfxd5b17iy077yjvqdfrvwn0npp6vw-ncurses-6.4.20221231-dev' '/nix/store/c7qx9iq6lqfjd4dxrdd6723l6rvzsj5s-ncurses-6.4.20221231' '/nix/store/rf0rvd79mdhy427nv1wv9shkc9nglijz-readline-8.2p13' '/nix/store/vnh2m6fyk3q9zs6h2mr160wr7ixwgvyp-libusb-compat-0.1.8-dev' '/nix/store/ah8rlpz8k1hba45m6bakj8slmgik349n-libusb-compat-0.1.8' '/nix/store/qaggzhjjkk71jdd0pi8ad17q25dxi56r-libewf-20231119' '/nix/store/pg37w2gymgf5rdlp00c3jn7hw37bnmyc-perl-5.40.0' '/nix/store/3nkb6rscay1w5ky9xziy7qnjl0i4dx25-libxcrypt-4.4.36' '/nix/store/cir85maag3aj3sddq35y59m0wmcr50wk-zlib-1.3.1-dev' '/nix/store/ncjma3lhr1sf6mqaczl9mfhjmp6ix58w-zlib-1.3.1' '/nix/store/xm6d1ig9ff7zkid1gvzsbig45m2pnlaz-openssl-3.3.2-dev' '/nix/store/9x40a20if2q28m96hlw3q5z5q5ajgpgp-openssl-3.3.2-bin' '/nix/store/m8gwqmn8k3jm0gbcia358mz4y00lgmbc-openssl-3.3.2' '/nix/store/8cxyn5lwjcvvjzxb856xpn640535lfk2-libuv-1.48.0-dev' '/nix/store/4km89rsvqzi32vqja3lxgi66yqbr3lx8-libuv-1.48.0' '/nix/store/sj4wz8d69b76khsy7y3ddp759vb1w7ym-lz4-1.10.0-dev' '/nix/store/ffddichm4vj28fqv02j4dm2nmz8415sw-lz4-1.10.0-lib' '/nix/store/d1hh5c7kz3b3djajclfw25bw6pcdsmcy-lz4-1.10.0' '/nix/store/852jps5qc5xy46w37kcxi7cynipwqmp7-python3.12-capstone-5.0.1' '/nix/store/nxgx33hs40fc9qrrn3y9g4wv0db8pmhy-python3.12-setuptools-75.1.0' '/nix/store/901c80rlps5q05bnjk1sj4zaz5k736nc-python3-3.12.7' '/nix/store/901c80rlps5q05bnjk1sj4zaz5k736nc-python3-3.12.7' '/nix/store/12ymmp3ln3slhdzfrj131qvlmnbbygg1-python3.12-colored-traceback-0.4.2' '/nix/store/njj1j8klzs8m7zc45n363hq138p84bg4-python3.12-pygments-2.18.0' '/nix/store/4b6milcm7c5szvs17xxhnppnxx4amaz6-python3.12-intervaltree-3.1.0' '/nix/store/ji3d72vkqb0mk56kgdf7bagg2nhp9qdq-python3.12-sortedcontainers-2.4.0' '/nix/store/j8rn4cdj97xnfgzak8y0gqrn7sn1fsj1-python3.12-mako-1.3.5' '/nix/store/q2fw36zpzpyd28hxpshmc6b06psd7bvh-python3.12-markupsafe-3.0.1' '/nix/store/3w24hxn0jrhc1z6yvq0nc59209bpw4fw-python3.12-packaging-24.1' '/nix/store/mswq6hxgva7m876490v7c4cfphsilsyj-python3.12-paramiko-3.5.0' '/nix/store/1ifagjr5dmw7p7sdp3akq8nh3ky1gga2-python3.12-bcrypt-4.2.0' '/nix/store/k78wn48njw17avlsviyi83z5facg9fxp-python3.12-cryptography-43.0.1' '/nix/store/r0lkjnq9bygajpch2qmy1hrvkpsabs8g-python3.12-cffi-1.17.1' '/nix/store/n303fisfpb47mjm37iacp3vyqq7zdk0d-python3.12-pycparser-2.22' '/nix/store/djcnmnrlkyfaf83xfvz6s0ga28vxzfim-python3.12-pynacl-1.5.0' '/nix/store/zzaanfpx5rzzwszdi96ms79sc04d1rvq-python3.12-psutil-6.0.0' '/nix/store/spa9vzcw99a2ck7hps1m1c241bzfvjbs-python3.12-pyelftools-0.31' '/nix/store/c2mfcz9x88qdkzbdg66nwaz4s4hh5fji-python3.12-pyserial-3.5' '/nix/store/4yyba8yllw1hq4w4w1g19k4xmvjzvmba-python3.12-pysocks-1.7.1' '/nix/store/qw0zfbf4gad249zxzzvy67y27qzwilwr-python3.12-python-dateutil-2.9.0.post0' '/nix/store/cvzpns36fhpd6j2sh759i71kia7jmras-python3.12-six-1.16.0' '/nix/store/l4y7mm2d1dnybyym01b4032h4gji221p-python3.12-requests-2.32.3' '/nix/store/phxp28l7dcb9342aafr1ma7a32payly7-python3.12-brotlicffi-1.1.0.0' '/nix/store/2jgmq8i2p9z64gf3zrx1ba0n917nf15i-python3.12-certifi-2024.08.30' '/nix/store/3d8jh19l44g0aal4vclry3ivrjrkpv6c-python3.12-charset-normalizer-3.3.2' '/nix/store/gd41v3r4j5y0srkj0n4cpggcxvyngap5-python3.12-idna-3.10' '/nix/store/avkdkdhnb136l7scx4bnhjmnycfbjsl0-python3.12-urllib3-2.2.3' '/nix/store/f218gqr05ma97a196vwv17svjj2r71jj-python3.12-ropgadget-7.5' '/nix/store/aq65zh55qp6lj94n99ipijax5jdd9b0d-python3.12-rpyc-6.0.1' '/nix/store/1kjj5r0jxbxpf85jy82mrv666dw9dpzq-python3.12-plumbum-1.9.0' '/nix/store/lkq2nh7xl1akijjdmlbsfg9kky9231q4-python3.12-unicorn-2.1.1' '/nix/store/m187nw6a147n4qixxf1saimk3ywp5dpp-python3.12-unix-ar-0.2.1' '/nix/store/3yaa8q818pp9dxynafhlmpk14qbwk2c9-python3.12-zstandard-0.23.0' '/nix/store/q598qvf0s3n81x5xmr67zs305pxrpzgg-libzip-1.11.1-dev' '/nix/store/piv1hw8fwahj3g6dzqgxp1v60xf2g1qx-libzip-1.11.1' '/nix/store/zhhanmr3qmhw1ygg02f3412y1c7yirww-xxHash-0.8.2' )
declare -a pkgsTargetTarget=()
postBuild=' pythonRelaxDepsHook'
declare -a postFixupHooks=('pythonRemoveTestsDir' '_makeSymlinksRelativeInAllOutputs' '_multioutPropagateDev' )
declare -a postUnpackHooks=('_ensureNewerSources' '_updateSourceDateEpochFromSourceRoot' )
declare -a preConfigureHooks=('_multioutConfig' )
preConfigurePhases=' updateAutotoolsGnuConfigScriptsPhase'
preDistPhases=' pythonCatchConflictsPhase pythonRemoveBinBytecodePhase pythonImportsCheckPhase'
declare -a preFixupHooks=('_moveToShare' '_multioutDocs' '_multioutDevs' )
preFixupPhases=' pythonOutputDistPhase'
preInstallPhases=' pythonRuntimeDepsCheckHook'
preferLocalBuild='1'
export preferLocalBuild
prefix='/home/darktar/.config/nixos/home-manager/outputs/out'
declare -a propagatedBuildDepFiles=('propagated-build-build-deps' 'propagated-native-build-inputs' 'propagated-build-target-deps' )
propagatedBuildInputs='/nix/store/852jps5qc5xy46w37kcxi7cynipwqmp7-python3.12-capstone-5.0.1 /nix/store/12ymmp3ln3slhdzfrj131qvlmnbbygg1-python3.12-colored-traceback-0.4.2 /nix/store/4b6milcm7c5szvs17xxhnppnxx4amaz6-python3.12-intervaltree-3.1.0 /nix/store/j8rn4cdj97xnfgzak8y0gqrn7sn1fsj1-python3.12-mako-1.3.5 /nix/store/3w24hxn0jrhc1z6yvq0nc59209bpw4fw-python3.12-packaging-24.1 /nix/store/mswq6hxgva7m876490v7c4cfphsilsyj-python3.12-paramiko-3.5.0 /nix/store/zzaanfpx5rzzwszdi96ms79sc04d1rvq-python3.12-psutil-6.0.0 /nix/store/spa9vzcw99a2ck7hps1m1c241bzfvjbs-python3.12-pyelftools-0.31 /nix/store/njj1j8klzs8m7zc45n363hq138p84bg4-python3.12-pygments-2.18.0 /nix/store/c2mfcz9x88qdkzbdg66nwaz4s4hh5fji-python3.12-pyserial-3.5 /nix/store/4yyba8yllw1hq4w4w1g19k4xmvjzvmba-python3.12-pysocks-1.7.1 /nix/store/qw0zfbf4gad249zxzzvy67y27qzwilwr-python3.12-python-dateutil-2.9.0.post0 /nix/store/l4y7mm2d1dnybyym01b4032h4gji221p-python3.12-requests-2.32.3 /nix/store/f218gqr05ma97a196vwv17svjj2r71jj-python3.12-ropgadget-7.5 /nix/store/aq65zh55qp6lj94n99ipijax5jdd9b0d-python3.12-rpyc-6.0.1 /nix/store/cvzpns36fhpd6j2sh759i71kia7jmras-python3.12-six-1.16.0 /nix/store/ji3d72vkqb0mk56kgdf7bagg2nhp9qdq-python3.12-sortedcontainers-2.4.0 /nix/store/lkq2nh7xl1akijjdmlbsfg9kky9231q4-python3.12-unicorn-2.1.1 /nix/store/m187nw6a147n4qixxf1saimk3ywp5dpp-python3.12-unix-ar-0.2.1 /nix/store/3yaa8q818pp9dxynafhlmpk14qbwk2c9-python3.12-zstandard-0.23.0 /nix/store/901c80rlps5q05bnjk1sj4zaz5k736nc-python3-3.12.7 /nix/store/yad519r64n37pwnwsd0z64qkd1b3l66b-file-5.45-dev /nix/store/q598qvf0s3n81x5xmr67zs305pxrpzgg-libzip-1.11.1-dev /nix/store/zhhanmr3qmhw1ygg02f3412y1c7yirww-xxHash-0.8.2'
export propagatedBuildInputs
declare -a propagatedHostDepFiles=('propagated-host-host-deps' 'propagated-build-inputs' )
propagatedNativeBuildInputs=''
export propagatedNativeBuildInputs
declare -a propagatedTargetDepFiles=('propagated-target-target-deps' )
setOutputFlags=''
shell='/nix/store/mm0pa3z7kk6jh1i9rkxqxjqmd8h1qpxf-bash-5.2p37/bin/bash'
export shell
shellHook='export NIX_LD="/nix/store/q9608hqmr1x47dsdzbmam4bgwys1cfav-nix-ld-2.0.3/bin/nix-ld"
'
export shellHook
stdenv='/nix/store/1m9h3isxr4jh67yjjx540qf3sxwxhy3y-stdenv-linux'
export stdenv
strictDeps=''
export strictDeps
system='x86_64-linux'
export system
declare -a unpackCmdHooks=('_defaultUnpack' )
_activatePkgs ()
{
 
    local hostOffset targetOffset;
    local pkg;
    for hostOffset in "${allPlatOffsets[@]}";
    do
        local pkgsVar="${pkgAccumVarVars[hostOffset + 1]}";
        for targetOffset in "${allPlatOffsets[@]}";
        do
            (( hostOffset <= targetOffset )) || continue;
            local pkgsRef="${pkgsVar}[$targetOffset - $hostOffset]";
            local pkgsSlice="${!pkgsRef}[@]";
            for pkg in ${!pkgsSlice+"${!pkgsSlice}"};
            do
                activatePackage "$pkg" "$hostOffset" "$targetOffset";
            done;
        done;
    done
}
_addRpathPrefix ()
{
 
    if [ "${NIX_NO_SELF_RPATH:-0}" != 1 ]; then
        export NIX_LDFLAGS="-rpath $1/lib ${NIX_LDFLAGS-}";
    fi
}
_addToEnv ()
{
 
    local depHostOffset depTargetOffset;
    local pkg;
    for depHostOffset in "${allPlatOffsets[@]}";
    do
        local hookVar="${pkgHookVarVars[depHostOffset + 1]}";
        local pkgsVar="${pkgAccumVarVars[depHostOffset + 1]}";
        for depTargetOffset in "${allPlatOffsets[@]}";
        do
            (( depHostOffset <= depTargetOffset )) || continue;
            local hookRef="${hookVar}[$depTargetOffset - $depHostOffset]";
            if [[ -z "${strictDeps-}" ]]; then
                local visitedPkgs="";
                for pkg in "${pkgsBuildBuild[@]}" "${pkgsBuildHost[@]}" "${pkgsBuildTarget[@]}" "${pkgsHostHost[@]}" "${pkgsHostTarget[@]}" "${pkgsTargetTarget[@]}";
                do
                    if [[ "$visitedPkgs" = *"$pkg"* ]]; then
                        continue;
                    fi;
                    runHook "${!hookRef}" "$pkg";
                    visitedPkgs+=" $pkg";
                done;
            else
                local pkgsRef="${pkgsVar}[$depTargetOffset - $depHostOffset]";
                local pkgsSlice="${!pkgsRef}[@]";
                for pkg in ${!pkgsSlice+"${!pkgsSlice}"};
                do
                    runHook "${!hookRef}" "$pkg";
                done;
            fi;
        done;
    done
}
_addToPythonPath ()
{
 
    local dir="$1";
    if [ -n "${pythonPathsSeen[$dir]}" ]; then
        return;
    fi;
    pythonPathsSeen[$dir]=1;
    addToSearchPath program_PYTHONPATH $dir/lib/python3.12/site-packages;
    addToSearchPath program_PATH $dir/bin;
    local prop="$dir/nix-support/propagated-build-inputs";
    if [ -e $prop ]; then
        local new_path;
        for new_path in $(cat $prop);
        do
            _addToPythonPath $new_path;
        done;
    fi
}
_allFlags ()
{
 
    export system pname name version;
    while IFS='' read -r varName; do
        nixTalkativeLog "@${varName}@ -> ${!varName}";
        args+=("--subst-var" "$varName");
    done < <(awk 'BEGIN { for (v in ENVIRON) if (v ~ /^[a-z][a-zA-Z0-9_]*$/) print v }')
}
_assignFirst ()
{
 
    local varName="$1";
    local _var;
    local REMOVE=REMOVE;
    shift;
    for _var in "$@";
    do
        if [ -n "${!_var-}" ]; then
            eval "${varName}"="${_var}";
            return;
        fi;
    done;
    echo;
    echo "error: _assignFirst: could not find a non-empty variable whose name to assign to ${varName}.";
    echo "       The following variables were all unset or empty:";
    echo "           $*";
    if [ -z "${out:-}" ]; then
        echo '       If you do not want an "out" output in your derivation, make sure to define';
        echo '       the other specific required outputs. This can be achieved by picking one';
        echo "       of the above as an output.";
        echo '       You do not have to remove "out" if you want to have a different default';
        echo '       output, because the first output is taken as a default.';
        echo;
    fi;
    return 1
}
_callImplicitHook ()
{
 
    local def="$1";
    local hookName="$2";
    if declare -F "$hookName" > /dev/null; then
        nixTalkativeLog "calling implicit '$hookName' function hook";
        "$hookName";
    else
        if type -p "$hookName" > /dev/null; then
            nixTalkativeLog "sourcing implicit '$hookName' script hook";
            source "$hookName";
        else
            if [ -n "${!hookName:-}" ]; then
                nixTalkativeLog "evaling implicit '$hookName' string hook";
                eval "${!hookName}";
            else
                return "$def";
            fi;
        fi;
    fi
}
_defaultUnpack ()
{
 
    local fn="$1";
    local destination;
    if [ -d "$fn" ]; then
        destination="$(stripHash "$fn")";
        if [ -e "$destination" ]; then
            echo "Cannot copy $fn to $destination: destination already exists!";
            echo "Did you specify two \"srcs\" with the same \"name\"?";
            return 1;
        fi;
        cp -pr --reflink=auto -- "$fn" "$destination";
    else
        case "$fn" in 
            *.tar.xz | *.tar.lzma | *.txz)
                ( XZ_OPT="--threads=$NIX_BUILD_CORES" xz -d < "$fn";
                true ) | tar xf - --mode=+w --warning=no-timestamp
            ;;
            *.tar | *.tar.* | *.tgz | *.tbz2 | *.tbz)
                tar xf "$fn" --mode=+w --warning=no-timestamp
            ;;
            *)
                return 1
            ;;
        esac;
    fi
}
_doStrip ()
{
 
    local -ra flags=(dontStripHost dontStripTarget);
    local -ra debugDirs=(stripDebugList stripDebugListTarget);
    local -ra allDirs=(stripAllList stripAllListTarget);
    local -ra stripCmds=(STRIP STRIP_FOR_TARGET);
    local -ra ranlibCmds=(RANLIB RANLIB_FOR_TARGET);
    stripDebugList=${stripDebugList[*]:-lib lib32 lib64 libexec bin sbin};
    stripDebugListTarget=${stripDebugListTarget[*]:-};
    stripAllList=${stripAllList[*]:-};
    stripAllListTarget=${stripAllListTarget[*]:-};
    local i;
    for i in ${!stripCmds[@]};
    do
        local -n flag="${flags[$i]}";
        local -n debugDirList="${debugDirs[$i]}";
        local -n allDirList="${allDirs[$i]}";
        local -n stripCmd="${stripCmds[$i]}";
        local -n ranlibCmd="${ranlibCmds[$i]}";
        if [[ -n "${dontStrip-}" || -n "${flag-}" ]] || ! type -f "${stripCmd-}" 2> /dev/null 1>&2; then
            continue;
        fi;
        stripDirs "$stripCmd" "$ranlibCmd" "$debugDirList" "${stripDebugFlags[*]:--S -p}";
        stripDirs "$stripCmd" "$ranlibCmd" "$allDirList" "${stripAllFlags[*]:--s -p}";
    done
}
_ensureNewerSources ()
{
 
    local r=$sourceRoot;
    [[ $r == -* ]] && r="./$r";
    '/nix/store/psjqqbj19n3fqssn38hgz4cv7b7a9alp-findutils-4.10.0/bin/find' "$r" '!' -newermt '1980-01-01' -exec touch -h -d '1980-01-02' '{}' '+'
}
_eval ()
{
 
    if declare -F "$1" > /dev/null 2>&1; then
        "$@";
    else
        eval "$1";
    fi
}
_logHook ()
{
 
    if [[ -z ${NIX_LOG_FD-} ]]; then
        return;
    fi;
    local hookKind="$1";
    local hookExpr="$2";
    shift 2;
    if declare -F "$hookExpr" > /dev/null 2>&1; then
        nixTalkativeLog "calling '$hookKind' function hook '$hookExpr'" "$@";
    else
        if type -p "$hookExpr" > /dev/null; then
            nixTalkativeLog "sourcing '$hookKind' script hook '$hookExpr'";
        else
            if [[ "$hookExpr" != "_callImplicitHook"* ]]; then
                local exprToOutput;
                if [[ ${NIX_DEBUG:-0} -ge 5 ]]; then
                    exprToOutput="$hookExpr";
                else
                    local hookExprLine;
                    while IFS= read -r hookExprLine; do
                        hookExprLine="${hookExprLine#"${hookExprLine%%[![:space:]]*}"}";
                        if [[ -n "$hookExprLine" ]]; then
                            exprToOutput+="$hookExprLine\\n ";
                        fi;
                    done <<< "$hookExpr";
                    exprToOutput="${exprToOutput%%\\n }";
                fi;
                nixTalkativeLog "evaling '$hookKind' string hook '$exprToOutput'";
            fi;
        fi;
    fi
}
_makeSymlinksRelative ()
{
 
    local symlinkTarget;
    if [ "${dontRewriteSymlinks-}" ] || [ ! -e "$prefix" ]; then
        return;
    fi;
    while IFS= read -r -d '' f; do
        symlinkTarget=$(readlink "$f");
        if [[ "$symlinkTarget"/ != "$prefix"/* ]]; then
            continue;
        fi;
        if [ ! -e "$symlinkTarget" ]; then
            echo "the symlink $f is broken, it points to $symlinkTarget (which is missing)";
        fi;
        echo "rewriting symlink $f to be relative to $prefix";
        ln -snrf "$symlinkTarget" "$f";
    done < <(find $prefix -type l -print0)
}
_makeSymlinksRelativeInAllOutputs ()
{
 
    local output;
    for output in $(getAllOutputNames);
    do
        prefix="${!output}" _makeSymlinksRelative;
    done
}
_moveLib64 ()
{
 
    if [ "${dontMoveLib64-}" = 1 ]; then
        return;
    fi;
    if [ ! -e "$prefix/lib64" -o -L "$prefix/lib64" ]; then
        return;
    fi;
    echo "moving $prefix/lib64/* to $prefix/lib";
    mkdir -p $prefix/lib;
    shopt -s dotglob;
    for i in $prefix/lib64/*;
    do
        mv --no-clobber "$i" $prefix/lib;
    done;
    shopt -u dotglob;
    rmdir $prefix/lib64;
    ln -s lib $prefix/lib64
}
_moveSbin ()
{
 
    if [ "${dontMoveSbin-}" = 1 ]; then
        return;
    fi;
    if [ ! -e "$prefix/sbin" -o -L "$prefix/sbin" ]; then
        return;
    fi;
    echo "moving $prefix/sbin/* to $prefix/bin";
    mkdir -p $prefix/bin;
    shopt -s dotglob;
    for i in $prefix/sbin/*;
    do
        mv "$i" $prefix/bin;
    done;
    shopt -u dotglob;
    rmdir $prefix/sbin;
    ln -s bin $prefix/sbin
}
_moveSystemdUserUnits ()
{
 
    if [ "${dontMoveSystemdUserUnits:-0}" = 1 ]; then
        return;
    fi;
    if [ ! -e "${prefix:?}/lib/systemd/user" ]; then
        return;
    fi;
    local source="$prefix/lib/systemd/user";
    local target="$prefix/share/systemd/user";
    echo "moving $source/* to $target";
    mkdir -p "$target";
    ( shopt -s dotglob;
    for i in "$source"/*;
    do
        mv "$i" "$target";
    done );
    rmdir "$source";
    ln -s "$target" "$source"
}
_moveToShare ()
{
 
    if [ -n "$__structuredAttrs" ]; then
        if [ -z "${forceShare-}" ]; then
            forceShare=(man doc info);
        fi;
    else
        forceShare=(${forceShare:-man doc info});
    fi;
    if [[ -z "$out" ]]; then
        return;
    fi;
    for d in "${forceShare[@]}";
    do
        if [ -d "$out/$d" ]; then
            if [ -d "$out/share/$d" ]; then
                echo "both $d/ and share/$d/ exist!";
            else
                echo "moving $out/$d to $out/share/$d";
                mkdir -p $out/share;
                mv $out/$d $out/share/;
            fi;
        fi;
    done
}
_multioutConfig ()
{
 
    if [ "$(getAllOutputNames)" = "out" ] || [ -z "${setOutputFlags-1}" ]; then
        return;
    fi;
    if [ -z "${shareDocName:-}" ]; then
        local confScript="${configureScript:-}";
        if [ -z "$confScript" ] && [ -x ./configure ]; then
            confScript=./configure;
        fi;
        if [ -f "$confScript" ]; then
            local shareDocName="$(sed -n "s/^PACKAGE_TARNAME='\(.*\)'$/\1/p" < "$confScript")";
        fi;
        if [ -z "$shareDocName" ] || echo "$shareDocName" | grep -q '[^a-zA-Z0-9_-]'; then
            shareDocName="$(echo "$name" | sed 's/-[^a-zA-Z].*//')";
        fi;
    fi;
    prependToVar configureFlags --bindir="${!outputBin}"/bin --sbindir="${!outputBin}"/sbin --includedir="${!outputInclude}"/include --oldincludedir="${!outputInclude}"/include --mandir="${!outputMan}"/share/man --infodir="${!outputInfo}"/share/info --docdir="${!outputDoc}"/share/doc/"${shareDocName}" --libdir="${!outputLib}"/lib --libexecdir="${!outputLib}"/libexec --localedir="${!outputLib}"/share/locale;
    prependToVar installFlags pkgconfigdir="${!outputDev}"/lib/pkgconfig m4datadir="${!outputDev}"/share/aclocal aclocaldir="${!outputDev}"/share/aclocal
}
_multioutDevs ()
{
 
    if [ "$(getAllOutputNames)" = "out" ] || [ -z "${moveToDev-1}" ]; then
        return;
    fi;
    moveToOutput include "${!outputInclude}";
    moveToOutput lib/pkgconfig "${!outputDev}";
    moveToOutput share/pkgconfig "${!outputDev}";
    moveToOutput lib/cmake "${!outputDev}";
    moveToOutput share/aclocal "${!outputDev}";
    for f in "${!outputDev}"/{lib,share}/pkgconfig/*.pc;
    do
        echo "Patching '$f' includedir to output ${!outputInclude}";
        sed -i "/^includedir=/s,=\${prefix},=${!outputInclude}," "$f";
    done
}
_multioutDocs ()
{
 
    local REMOVE=REMOVE;
    moveToOutput share/info "${!outputInfo}";
    moveToOutput share/doc "${!outputDoc}";
    moveToOutput share/gtk-doc "${!outputDevdoc}";
    moveToOutput share/devhelp/books "${!outputDevdoc}";
    moveToOutput share/man "${!outputMan}";
    moveToOutput share/man/man3 "${!outputDevman}"
}
_multioutPropagateDev ()
{
 
    if [ "$(getAllOutputNames)" = "out" ]; then
        return;
    fi;
    local outputFirst;
    for outputFirst in $(getAllOutputNames);
    do
        break;
    done;
    local propagaterOutput="$outputDev";
    if [ -z "$propagaterOutput" ]; then
        propagaterOutput="$outputFirst";
    fi;
    if [ -z "${propagatedBuildOutputs+1}" ]; then
        local po_dirty="$outputBin $outputInclude $outputLib";
        set +o pipefail;
        propagatedBuildOutputs=`echo "$po_dirty"             | tr -s ' ' '\n' | grep -v -F "$propagaterOutput"             | sort -u | tr '\n' ' ' `;
        set -o pipefail;
    fi;
    if [ -z "$propagatedBuildOutputs" ]; then
        return;
    fi;
    mkdir -p "${!propagaterOutput}"/nix-support;
    for output in $propagatedBuildOutputs;
    do
        echo -n " ${!output}" >> "${!propagaterOutput}"/nix-support/propagated-build-inputs;
    done
}
_overrideFirst ()
{
 
    if [ -z "${!1-}" ]; then
        _assignFirst "$@";
    fi
}
_pruneLibtoolFiles ()
{
 
    if [ "${dontPruneLibtoolFiles-}" ] || [ ! -e "$prefix" ]; then
        return;
    fi;
    find "$prefix" -type f -name '*.la' -exec grep -q '^# Generated by .*libtool' {} \; -exec grep -q "^old_library=''" {} \; -exec sed -i {} -e "/^dependency_libs='[^']/ c dependency_libs='' #pruned" \;
}
_pythonRelaxDeps ()
{
 
    local -r metadata_file="$1";
    if [[ -z "${pythonRelaxDeps:-}" ]] || [[ "$pythonRelaxDeps" == 0 ]]; then
        return;
    else
        if [[ "$pythonRelaxDeps" == 1 ]]; then
            sed -i "$metadata_file" -r -e 's/(Requires-Dist: [a-zA-Z0-9_.-]+\s*(\[[^]]+\])?)[^;]*(;.*)?/\1\3/';
        else
            for dep in $pythonRelaxDeps;
            do
                sed -i "$metadata_file" -r -e "s/(Requires-Dist: $dep\s*(\[[^]]+\])?)[^;]*(;.*)?/\1\3/i";
            done;
        fi;
    fi
}
_pythonRemoveDeps ()
{
 
    local -r metadata_file="$1";
    if [[ -z "${pythonRemoveDeps:-}" ]] || [[ "$pythonRemoveDeps" == 0 ]]; then
        return;
    else
        if [[ "$pythonRemoveDeps" == 1 ]]; then
            sed -i "$metadata_file" -e '/Requires-Dist:.*/d';
        else
            for dep in $pythonRemoveDeps;
            do
                sed -i "$metadata_file" -e "/Requires-Dist: $dep/d";
            done;
        fi;
    fi
}
_updateSourceDateEpochFromSourceRoot ()
{
 
    if [ -n "$sourceRoot" ]; then
        updateSourceDateEpoch "$sourceRoot";
    fi
}
activatePackage ()
{
 
    local pkg="$1";
    local -r hostOffset="$2";
    local -r targetOffset="$3";
    (( hostOffset <= targetOffset )) || exit 1;
    if [ -f "$pkg" ]; then
        nixTalkativeLog "sourcing setup hook '$pkg'";
        source "$pkg";
    fi;
    if [[ -z "${strictDeps-}" || "$hostOffset" -le -1 ]]; then
        addToSearchPath _PATH "$pkg/bin";
    fi;
    if (( hostOffset <= -1 )); then
        addToSearchPath _XDG_DATA_DIRS "$pkg/share";
    fi;
    if [[ "$hostOffset" -eq 0 && -d "$pkg/bin" ]]; then
        addToSearchPath _HOST_PATH "$pkg/bin";
    fi;
    if [[ -f "$pkg/nix-support/setup-hook" ]]; then
        nixTalkativeLog "sourcing setup hook '$pkg/nix-support/setup-hook'";
        source "$pkg/nix-support/setup-hook";
    fi
}
addEnvHooks ()
{
 
    local depHostOffset="$1";
    shift;
    local pkgHookVarsSlice="${pkgHookVarVars[$depHostOffset + 1]}[@]";
    local pkgHookVar;
    for pkgHookVar in "${!pkgHookVarsSlice}";
    do
        eval "${pkgHookVar}s"'+=("$@")';
    done
}
addPerlLibPath ()
{
 
    addToSearchPath PERL5LIB $1/lib/perl5/site_perl
}
addPythonPath ()
{
 
    addToSearchPathWithCustomDelimiter : PYTHONPATH $1/lib/python3.12/site-packages
}
addSuffix ()
{
 
    suffix="$1";
    shift;
    for name in "$@";
    do
        echo "$name$suffix";
    done
}
addToSearchPath ()
{
 
    addToSearchPathWithCustomDelimiter ":" "$@"
}
addToSearchPathWithCustomDelimiter ()
{
 
    local delimiter="$1";
    local varName="$2";
    local dir="$3";
    if [[ -d "$dir" && "${!varName:+${delimiter}${!varName}${delimiter}}" != *"${delimiter}${dir}${delimiter}"* ]]; then
        export "${varName}=${!varName:+${!varName}${delimiter}}${dir}";
    fi
}
appendToVar ()
{
 
    local -n nameref="$1";
    local useArray type;
    if [ -n "$__structuredAttrs" ]; then
        useArray=true;
    else
        useArray=false;
    fi;
    if type=$(declare -p "$1" 2> /dev/null); then
        case "${type#* }" in 
            -A*)
                echo "appendToVar(): ERROR: trying to use appendToVar on an associative array, use variable+=([\"X\"]=\"Y\") instead." 1>&2;
                return 1
            ;;
            -a*)
                useArray=true
            ;;
            *)
                useArray=false
            ;;
        esac;
    fi;
    shift;
    if $useArray; then
        nameref=(${nameref+"${nameref[@]}"} "$@");
    else
        nameref="${nameref-} $*";
    fi
}
assertExecutable ()
{
 
    local file="$1";
    [[ -f "$file" && -x "$file" ]] || die "Cannot wrap '$file' because it is not an executable file"
}
auditTmpdir ()
{
 
    local dir="$1";
    [ -e "$dir" ] || return 0;
    echo "checking for references to $TMPDIR/ in $dir...";
    local i;
    find "$dir" -type f -print0 | while IFS= read -r -d '' i; do
        if [[ "$i" =~ .build-id ]]; then
            continue;
        fi;
        if isELF "$i"; then
            if { 
                printf :;
                patchelf --print-rpath "$i"
            } | grep -q -F ":$TMPDIR/"; then
                echo "RPATH of binary $i contains a forbidden reference to $TMPDIR/";
                exit 1;
            fi;
        fi;
        if isScript "$i"; then
            if [ -e "$(dirname "$i")/.$(basename "$i")-wrapped" ]; then
                if grep -q -F "$TMPDIR/" "$i"; then
                    echo "wrapper script $i contains a forbidden reference to $TMPDIR/";
                    exit 1;
                fi;
            fi;
        fi;
    done
}
buildPhase ()
{
 
    runHook preBuild;
    if [[ -z "${makeFlags-}" && -z "${makefile:-}" && ! ( -e Makefile || -e makefile || -e GNUmakefile ) ]]; then
        echo "no Makefile or custom buildPhase, doing nothing";
    else
        foundMakefile=1;
        local flagsArray=(${enableParallelBuilding:+-j${NIX_BUILD_CORES}} SHELL="$SHELL");
        concatTo flagsArray makeFlags makeFlagsArray buildFlags buildFlagsArray;
        echoCmd 'build flags' "${flagsArray[@]}";
        make ${makefile:+-f $makefile} "${flagsArray[@]}";
        unset flagsArray;
    fi;
    runHook postBuild
}
buildPythonPath ()
{
 
    local pythonPath="$1";
    local path;
    declare -A pythonPathsSeen=();
    program_PYTHONPATH=;
    program_PATH=;
    pythonPathsSeen["/nix/store/901c80rlps5q05bnjk1sj4zaz5k736nc-python3-3.12.7"]=1;
    addToSearchPath program_PATH /nix/store/901c80rlps5q05bnjk1sj4zaz5k736nc-python3-3.12.7/bin;
    for path in $pythonPath;
    do
        _addToPythonPath $path;
    done
}
checkPhase ()
{
 
    runHook preCheck;
    if [[ -z "${foundMakefile:-}" ]]; then
        echo "no Makefile or custom checkPhase, doing nothing";
        runHook postCheck;
        return;
    fi;
    if [[ -z "${checkTarget:-}" ]]; then
        if make -n ${makefile:+-f $makefile} check > /dev/null 2>&1; then
            checkTarget="check";
        else
            if make -n ${makefile:+-f $makefile} test > /dev/null 2>&1; then
                checkTarget="test";
            fi;
        fi;
    fi;
    if [[ -z "${checkTarget:-}" ]]; then
        echo "no check/test target in ${makefile:-Makefile}, doing nothing";
    else
        local flagsArray=(${enableParallelChecking:+-j${NIX_BUILD_CORES}} SHELL="$SHELL");
        concatTo flagsArray makeFlags makeFlagsArray checkFlags=VERBOSE=y checkFlagsArray checkTarget;
        echoCmd 'check flags' "${flagsArray[@]}";
        make ${makefile:+-f $makefile} "${flagsArray[@]}";
        unset flagsArray;
    fi;
    runHook postCheck
}
compressManPages ()
{
 
    local dir="$1";
    if [ -L "$dir"/share ] || [ -L "$dir"/share/man ] || [ ! -d "$dir/share/man" ]; then
        return;
    fi;
    echo "gzipping man pages under $dir/share/man/";
    find "$dir"/share/man/ -type f -a '!' -regex '.*\.\(bz2\|gz\|xz\)$' -print0 | while IFS= read -r -d '' f; do
        if gzip -c -n "$f" > "$f".gz; then
            rm "$f";
        else
            rm "$f".gz;
        fi;
    done;
    find "$dir"/share/man/ -type l -a '!' -regex '.*\.\(bz2\|gz\|xz\)$' -print0 | sort -z | while IFS= read -r -d '' f; do
        local target;
        target="$(readlink -f "$f")";
        if [ -f "$target".gz ]; then
            ln -sf "$target".gz "$f".gz && rm "$f";
        fi;
    done
}
concatStringsSep ()
{
 
    local sep="$1";
    local name="$2";
    local type oldifs;
    if type=$(declare -p "$name" 2> /dev/null); then
        local -n nameref="$name";
        case "${type#* }" in 
            -A*)
                echo "concatStringsSep(): ERROR: trying to use concatStringsSep on an associative array." 1>&2;
                return 1
            ;;
            -a*)
                local IFS="$sep";
                echo -n "${nameref[*]}"
            ;;
            *)
                echo -n "${nameref// /"${sep}"}"
            ;;
        esac;
    fi
}
concatTo ()
{
 
    local -;
    set -o noglob;
    local -n targetref="$1";
    shift;
    local arg default name type;
    for arg in "$@";
    do
        IFS="=" read -r name default <<< "$arg";
        local -n nameref="$name";
        if [[ ! -n "${nameref[@]}" && -n "$default" ]]; then
            targetref+=("$default");
        else
            if type=$(declare -p "$name" 2> /dev/null); then
                case "${type#* }" in 
                    -A*)
                        echo "concatTo(): ERROR: trying to use concatTo on an associative array." 1>&2;
                        return 1
                    ;;
                    -a*)
                        targetref+=("${nameref[@]}")
                    ;;
                    *)
                        if [[ "$name" = *"Array" ]]; then
                            nixErrorLog "concatTo(): $name is not declared as array, treating as a singleton. This will become an error in future";
                            targetref+=(${nameref+"${nameref[@]}"});
                        else
                            targetref+=(${nameref-});
                        fi
                    ;;
                esac;
            fi;
        fi;
    done
}
configurePhase ()
{
 
    runHook preConfigure;
    : "${configureScript=}";
    if [[ -z "$configureScript" && -x ./configure ]]; then
        configureScript=./configure;
    fi;
    if [ -z "${dontFixLibtool:-}" ]; then
        export lt_cv_deplibs_check_method="${lt_cv_deplibs_check_method-pass_all}";
        local i;
        find . -iname "ltmain.sh" -print0 | while IFS='' read -r -d '' i; do
            echo "fixing libtool script $i";
            fixLibtool "$i";
        done;
        CONFIGURE_MTIME_REFERENCE=$(mktemp configure.mtime.reference.XXXXXX);
        find . -executable -type f -name configure -exec grep -l 'GNU Libtool is free software; you can redistribute it and/or modify' {} \; -exec touch -r {} "$CONFIGURE_MTIME_REFERENCE" \; -exec sed -i s_/usr/bin/file_file_g {} \; -exec touch -r "$CONFIGURE_MTIME_REFERENCE" {} \;;
        rm -f "$CONFIGURE_MTIME_REFERENCE";
    fi;
    if [[ -z "${dontAddPrefix:-}" && -n "$prefix" ]]; then
        prependToVar configureFlags "${prefixKey:---prefix=}$prefix";
    fi;
    if [[ -f "$configureScript" ]]; then
        if [ -z "${dontAddDisableDepTrack:-}" ]; then
            if grep -q dependency-tracking "$configureScript"; then
                prependToVar configureFlags --disable-dependency-tracking;
            fi;
        fi;
        if [ -z "${dontDisableStatic:-}" ]; then
            if grep -q enable-static "$configureScript"; then
                prependToVar configureFlags --disable-static;
            fi;
        fi;
        if [ -z "${dontPatchShebangsInConfigure:-}" ]; then
            patchShebangs --build "$configureScript";
        fi;
    fi;
    if [ -n "$configureScript" ]; then
        local -a flagsArray;
        concatTo flagsArray configureFlags configureFlagsArray;
        echoCmd 'configure flags' "${flagsArray[@]}";
        $configureScript "${flagsArray[@]}";
        unset flagsArray;
    else
        echo "no configure script, doing nothing";
    fi;
    runHook postConfigure
}
consumeEntire ()
{
 
    if IFS='' read -r -d '' "$1"; then
        echo "consumeEntire(): ERROR: Input null bytes, won't process" 1>&2;
        return 1;
    fi
}
createBuildInputsPth ()
{
 
    local category="$1";
    local inputs="$2";
    if [ foo"$inputs" != foo ]; then
        for x in $inputs;
        do
            if $(echo -n $x | grep -q python-recursive-pth-loader); then
                continue;
            fi;
            if test -d "$x"/lib/python3.12/site-packages; then
                echo $x/lib/python3.12/site-packages >> "$out"/lib/python3.12/site-packages/${name}-nix-python-$category.pth;
            fi;
        done;
    fi
}
die ()
{
 
    set +e;
    printf "\nBuilder called die: %b\n" "$*";
    printf "Backtrace:\n";
    local frame=0;
    while caller $frame; do
        ((frame++));
    done;
    printf "\n";
    exit 1
}
distPhase ()
{
 
    runHook preDist;
    local flagsArray=();
    concatTo flagsArray distFlags distFlagsArray distTarget=dist;
    echo 'dist flags: %q' "${flagsArray[@]}";
    make ${makefile:+-f $makefile} "${flagsArray[@]}";
    if [ "${dontCopyDist:-0}" != 1 ]; then
        mkdir -p "$out/tarballs";
        cp -pvd ${tarballs[*]:-*.tar.gz} "$out/tarballs";
    fi;
    runHook postDist
}
dumpVars ()
{
 
    if [ "${noDumpEnvVars:-0}" != 1 ]; then
        { 
            install -m 0600 /dev/null "$NIX_BUILD_TOP/env-vars" && export 2> /dev/null >| "$NIX_BUILD_TOP/env-vars"
        } || true;
    fi
}
echoCmd ()
{
 
    printf "%s:" "$1";
    shift;
    printf ' %q' "$@";
    echo
}
exitHandler ()
{
 
    exitCode="$?";
    set +e;
    if [ -n "${showBuildStats:-}" ]; then
        read -r -d '' -a buildTimes < <(times);
        echo "build times:";
        echo "user time for the shell             ${buildTimes[0]}";
        echo "system time for the shell           ${buildTimes[1]}";
        echo "user time for all child processes   ${buildTimes[2]}";
        echo "system time for all child processes ${buildTimes[3]}";
    fi;
    if (( "$exitCode" != 0 )); then
        runHook failureHook;
        if [ -n "${succeedOnFailure:-}" ]; then
            echo "build failed with exit code $exitCode (ignored)";
            mkdir -p "$out/nix-support";
            printf "%s" "$exitCode" > "$out/nix-support/failed";
            exit 0;
        fi;
    else
        runHook exitHook;
    fi;
    return "$exitCode"
}
filterExisting ()
{
 
    for fn in "$@";
    do
        if test -e "$fn"; then
            echo "$fn";
        fi;
    done
}
findInputs ()
{
 
    local -r pkg="$1";
    local -r hostOffset="$2";
    local -r targetOffset="$3";
    (( hostOffset <= targetOffset )) || exit 1;
    local varVar="${pkgAccumVarVars[hostOffset + 1]}";
    local varRef="$varVar[$((targetOffset - hostOffset))]";
    local var="${!varRef}";
    unset -v varVar varRef;
    local varSlice="$var[*]";
    case "${!varSlice-}" in 
        *" $pkg "*)
            return 0
        ;;
    esac;
    unset -v varSlice;
    eval "$var"'+=("$pkg")';
    if ! [ -e "$pkg" ]; then
        echo "build input $pkg does not exist" 1>&2;
        exit 1;
    fi;
    function mapOffset () 
    { 
        local -r inputOffset="$1";
        local -n outputOffset="$2";
        if (( inputOffset <= 0 )); then
            outputOffset=$((inputOffset + hostOffset));
        else
            outputOffset=$((inputOffset - 1 + targetOffset));
        fi
    };
    local relHostOffset;
    for relHostOffset in "${allPlatOffsets[@]}";
    do
        local files="${propagatedDepFilesVars[relHostOffset + 1]}";
        local hostOffsetNext;
        mapOffset "$relHostOffset" hostOffsetNext;
        (( -1 <= hostOffsetNext && hostOffsetNext <= 1 )) || continue;
        local relTargetOffset;
        for relTargetOffset in "${allPlatOffsets[@]}";
        do
            (( "$relHostOffset" <= "$relTargetOffset" )) || continue;
            local fileRef="${files}[$relTargetOffset - $relHostOffset]";
            local file="${!fileRef}";
            unset -v fileRef;
            local targetOffsetNext;
            mapOffset "$relTargetOffset" targetOffsetNext;
            (( -1 <= hostOffsetNext && hostOffsetNext <= 1 )) || continue;
            [[ -f "$pkg/nix-support/$file" ]] || continue;
            local pkgNext;
            read -r -d '' pkgNext < "$pkg/nix-support/$file" || true;
            for pkgNext in $pkgNext;
            do
                findInputs "$pkgNext" "$hostOffsetNext" "$targetOffsetNext";
            done;
        done;
    done
}
fixLibtool ()
{
 
    local search_path;
    for flag in $NIX_LDFLAGS;
    do
        case $flag in 
            -L*)
                search_path+=" ${flag#-L}"
            ;;
        esac;
    done;
    sed -i "$1" -e "s^eval \(sys_lib_search_path=\).*^\1'${search_path:-}'^" -e 's^eval sys_lib_.+search_path=.*^^'
}
fixupPhase ()
{
 
    local output;
    for output in $(getAllOutputNames);
    do
        if [ -e "${!output}" ]; then
            chmod -R u+w,u-s,g-s "${!output}";
        fi;
    done;
    runHook preFixup;
    local output;
    for output in $(getAllOutputNames);
    do
        prefix="${!output}" runHook fixupOutput;
    done;
    recordPropagatedDependencies;
    if [ -n "${setupHook:-}" ]; then
        mkdir -p "${!outputDev}/nix-support";
        substituteAll "$setupHook" "${!outputDev}/nix-support/setup-hook";
    fi;
    if [ -n "${setupHooks:-}" ]; then
        mkdir -p "${!outputDev}/nix-support";
        local hook;
        for hook in ${setupHooks[@]};
        do
            local content;
            consumeEntire content < "$hook";
            substituteAllStream content "file '$hook'" >> "${!outputDev}/nix-support/setup-hook";
            unset -v content;
        done;
        unset -v hook;
    fi;
    if [ -n "${propagatedUserEnvPkgs:-}" ]; then
        mkdir -p "${!outputBin}/nix-support";
        printWords $propagatedUserEnvPkgs > "${!outputBin}/nix-support/propagated-user-env-packages";
    fi;
    runHook postFixup
}
genericBuild ()
{
 
    export GZIP_NO_TIMESTAMPS=1;
    if [ -f "${buildCommandPath:-}" ]; then
        source "$buildCommandPath";
        return;
    fi;
    if [ -n "${buildCommand:-}" ]; then
        eval "$buildCommand";
        return;
    fi;
    if [ -z "${phases[*]:-}" ]; then
        phases="${prePhases[*]:-} unpackPhase patchPhase ${preConfigurePhases[*]:-}             configurePhase ${preBuildPhases[*]:-} buildPhase checkPhase             ${preInstallPhases[*]:-} installPhase ${preFixupPhases[*]:-} fixupPhase installCheckPhase             ${preDistPhases[*]:-} distPhase ${postPhases[*]:-}";
    fi;
    for curPhase in ${phases[*]};
    do
        runPhase "$curPhase";
    done
}
getAllOutputNames ()
{
 
    if [ -n "$__structuredAttrs" ]; then
        echo "${!outputs[*]}";
    else
        echo "$outputs";
    fi
}
getHostRole ()
{
 
    getRole "$hostOffset"
}
getHostRoleEnvHook ()
{
 
    getRole "$depHostOffset"
}
getRole ()
{
 
    case $1 in 
        -1)
            role_post='_FOR_BUILD'
        ;;
        0)
            role_post=''
        ;;
        1)
            role_post='_FOR_TARGET'
        ;;
        *)
            echo "pkg-config-wrapper-0.29.2: used as improper sort of dependency" 1>&2;
            return 1
        ;;
    esac
}
getTargetRole ()
{
 
    getRole "$targetOffset"
}
getTargetRoleEnvHook ()
{
 
    getRole "$depTargetOffset"
}
getTargetRoleWrapper ()
{
 
    case $targetOffset in 
        -1)
            export NIX_PKG_CONFIG_WRAPPER_TARGET_BUILD_x86_64_unknown_linux_gnu=1
        ;;
        0)
            export NIX_PKG_CONFIG_WRAPPER_TARGET_HOST_x86_64_unknown_linux_gnu=1
        ;;
        1)
            export NIX_PKG_CONFIG_WRAPPER_TARGET_TARGET_x86_64_unknown_linux_gnu=1
        ;;
        *)
            echo "pkg-config-wrapper-0.29.2: used as improper sort of dependency" 1>&2;
            return 1
        ;;
    esac
}
installBin ()
{
 
    local path;
    for path in "$@";
    do
        if test -z "$path"; then
            nixErrorLog "${FUNCNAME[0]}: path cannot be empty";
            return 1;
        fi;
        nixInfoLog "${FUNCNAME[0]}: installing $path";
        local basename;
        basename=$(stripHash "$path");
        local outRoot;
        outRoot=${!outputBin:?};
        local outPath="${outRoot}/bin/$basename";
        install -D --mode=755 --no-target-directory "$path" "${outRoot}/bin/$basename";
    done
}
installCheckPhase ()
{
 
    runHook preInstallCheck;
    if [[ -z "${foundMakefile:-}" ]]; then
        echo "no Makefile or custom installCheckPhase, doing nothing";
    else
        if [[ -z "${installCheckTarget:-}" ]] && ! make -n ${makefile:+-f $makefile} "${installCheckTarget:-installcheck}" > /dev/null 2>&1; then
            echo "no installcheck target in ${makefile:-Makefile}, doing nothing";
        else
            local flagsArray=(${enableParallelChecking:+-j${NIX_BUILD_CORES}} SHELL="$SHELL");
            concatTo flagsArray makeFlags makeFlagsArray installCheckFlags installCheckFlagsArray installCheckTarget=installcheck;
            echoCmd 'installcheck flags' "${flagsArray[@]}";
            make ${makefile:+-f $makefile} "${flagsArray[@]}";
            unset flagsArray;
        fi;
    fi;
    runHook postInstallCheck
}
installManPage ()
{
 
    local path;
    for path in "$@";
    do
        if test -z "$path"; then
            nixErrorLog "${FUNCNAME[0]}: path cannot be empty";
            return 1;
        fi;
        nixInfoLog "${FUNCNAME[0]}: installing $path";
        local basename;
        basename=$(stripHash "$path");
        local trimmed=${basename%.gz};
        local suffix=${trimmed##*.};
        if test -z "$suffix" -o "$suffix" = "$trimmed"; then
            nixErrorLog "${FUNCNAME[0]}: path missing manpage section suffix: $path";
            return 1;
        fi;
        local outRoot;
        if test "$suffix" = 3; then
            outRoot=${!outputDevman:?};
        else
            outRoot=${!outputMan:?};
        fi;
        local outPath="${outRoot}/share/man/man$suffix/$basename";
        install -D --mode=644 --no-target-directory "$path" "$outPath";
    done
}
installPhase ()
{
 
    runHook preInstall;
    if [[ -z "${makeFlags-}" && -z "${makefile:-}" && ! ( -e Makefile || -e makefile || -e GNUmakefile ) ]]; then
        echo "no Makefile or custom installPhase, doing nothing";
        runHook postInstall;
        return;
    else
        foundMakefile=1;
    fi;
    if [ -n "$prefix" ]; then
        mkdir -p "$prefix";
    fi;
    local flagsArray=(${enableParallelInstalling:+-j${NIX_BUILD_CORES}} SHELL="$SHELL");
    concatTo flagsArray makeFlags makeFlagsArray installFlags installFlagsArray installTargets=install;
    echoCmd 'install flags' "${flagsArray[@]}";
    make ${makefile:+-f $makefile} "${flagsArray[@]}";
    unset flagsArray;
    runHook postInstall
}
installShellCompletion ()
{
 
    local shell='' name='' cmdname='' retval=0 parseArgs=1 arg;
    while { 
        arg=$1;
        shift
    }; do
        if (( parseArgs )); then
            case "$arg" in 
                --bash | --fish | --zsh)
                    shell=${arg#--};
                    continue
                ;;
                --name)
                    name=$1;
                    shift || { 
                        nixErrorLog "${FUNCNAME[0]}: --name flag expected an argument";
                        return 1
                    };
                    continue
                ;;
                --name=*)
                    name=${arg#--name=};
                    continue
                ;;
                --cmd)
                    cmdname=$1;
                    shift || { 
                        nixErrorLog "${FUNCNAME[0]}: --cmd flag expected an argument";
                        return 1
                    };
                    continue
                ;;
                --cmd=*)
                    cmdname=${arg#--cmd=};
                    continue
                ;;
                --?*)
                    nixWarnLog "${FUNCNAME[0]}: unknown flag ${arg%%=*}";
                    retval=2;
                    continue
                ;;
                --)
                    parseArgs=0;
                    continue
                ;;
            esac;
        fi;
        nixInfoLog "${FUNCNAME[0]}: installing $arg${name:+ as $name}";
        local curShell=$shell;
        local outName='';
        if [[ -z "$arg" ]]; then
            nixErrorLog "${FUNCNAME[0]}: empty path is not allowed";
            return 1;
        else
            if [[ -p "$arg" ]]; then
                if [[ -z "$curShell" ]]; then
                    nixErrorLog "${FUNCNAME[0]}: named pipe requires one of --bash, --fish, or --zsh";
                    return 1;
                else
                    if [[ -z "$name" && -z "$cmdname" ]]; then
                        nixErrorLog "${FUNCNAME[0]}: named pipe requires one of --cmd or --name";
                        return 1;
                    fi;
                fi;
            else
                local argbase;
                argbase=$(stripHash "$arg");
                if [[ -z "$curShell" ]]; then
                    case "$argbase" in 
                        ?*.bash)
                            curShell=bash
                        ;;
                        ?*.fish)
                            curShell=fish
                        ;;
                        ?*.zsh)
                            curShell=zsh
                        ;;
                        *)
                            if [[ "$argbase" = _* && "$argbase" != *.* ]]; then
                                nixWarnLog "${FUNCNAME[0]}: assuming path \`$arg' is zsh; please specify with --zsh";
                                curShell=zsh;
                            else
                                nixWarnLog "${FUNCNAME[0]}: unknown shell for path: $arg" 1>&2;
                                retval=2;
                                continue;
                            fi
                        ;;
                    esac;
                fi;
                outName=$argbase;
            fi;
        fi;
        if [[ -n "$name" ]]; then
            outName=$name;
        else
            if [[ -n "$cmdname" ]]; then
                case "$curShell" in 
                    bash | fish)
                        outName=$cmdname.$curShell
                    ;;
                    zsh)
                        outName=_$cmdname
                    ;;
                    *)
                        nixErrorLog "${FUNCNAME[0]}: internal: shell $curShell not recognized";
                        return 1
                    ;;
                esac;
            fi;
        fi;
        local sharePath;
        case "$curShell" in 
            bash)
                sharePath=bash-completion/completions
            ;;
            fish)
                sharePath=fish/vendor_completions.d
            ;;
            zsh)
                sharePath=zsh/site-functions;
                if [[ -z "$name" && -z "$cmdname" ]]; then
                    outName=${outName%.zsh};
                    outName=_${outName#_};
                fi
            ;;
            *)
                nixErrorLog "${FUNCNAME[0]}: internal: shell $curShell not recognized";
                return 1
            ;;
        esac;
        local outDir="${!outputBin:?}/share/$sharePath";
        local outPath="$outDir/$outName";
        if [[ -p "$arg" ]]; then
            mkdir -p "$outDir" && cat "$arg" > "$outPath";
        else
            install -D --mode=644 --no-target-directory "$arg" "$outPath";
        fi;
        if [ ! -s "$outPath" ]; then
            nixErrorLog "${FUNCNAME[0]}: installed shell completion file \`$outPath' does not exist or has zero size";
            return 1;
        fi;
        name=;
    done;
    if [[ -n "$name" ]]; then
        nixErrorLog "${FUNCNAME[0]}: --name flag given with no path" 1>&2;
        return 1;
    fi;
    return $retval
}
isELF ()
{
 
    local fn="$1";
    local fd;
    local magic;
    exec {fd}< "$fn";
    read -r -n 4 -u "$fd" magic;
    exec {fd}>&-;
    if [ "$magic" = 'ELF' ]; then
        return 0;
    else
        return 1;
    fi
}
isMachO ()
{
 
    local fn="$1";
    local fd;
    local magic;
    exec {fd}< "$fn";
    read -r -n 4 -u "$fd" magic;
    exec {fd}>&-;
    if [[ "$magic" = $(echo -ne "\xfe\xed\xfa\xcf") || "$magic" = $(echo -ne "\xcf\xfa\xed\xfe") ]]; then
        return 0;
    else
        if [[ "$magic" = $(echo -ne "\xfe\xed\xfa\xce") || "$magic" = $(echo -ne "\xce\xfa\xed\xfe") ]]; then
            return 0;
        else
            if [[ "$magic" = $(echo -ne "\xca\xfe\xba\xbe") || "$magic" = $(echo -ne "\xbe\xba\xfe\xca") ]]; then
                return 0;
            else
                return 1;
            fi;
        fi;
    fi
}
isScript ()
{
 
    local fn="$1";
    local fd;
    local magic;
    exec {fd}< "$fn";
    read -r -n 2 -u "$fd" magic;
    exec {fd}>&-;
    if [[ "$magic" =~ \#! ]]; then
        return 0;
    else
        return 1;
    fi
}
makeShellWrapper ()
{
 
    local original="$1";
    local wrapper="$2";
    local params varName value command separator n fileNames;
    local argv0 flagsBefore flagsAfter flags;
    assertExecutable "$original";
    function addValue () 
    { 
        local mode="$1";
        local varName="$2";
        local separator="$3";
        local value="$4";
        local reenableGlob=0;
        if [[ ! -o noglob ]]; then
            reenableGlob=1;
        fi;
        set -o noglob;
        if [[ -n "$value" ]]; then
            local old_ifs=$IFS;
            IFS=$separator;
            if [[ "$mode" == '--prefix'* ]]; then
                local tmp=;
                for v in $value;
                do
                    tmp=$v${tmp:+$separator}$tmp;
                done;
                value="$tmp";
            fi;
            for v in $value;
            do
                { 
                    echo "$varName=\${$varName:+${separator@Q}\$$varName${separator@Q}}";
                    if [[ "$mode" == '--prefix'* ]]; then
                        echo "$varName=\${$varName/${separator@Q}${v@Q}${separator@Q}/${separator@Q}}";
                        echo "$varName=${v@Q}\$$varName";
                    else
                        if [[ "$mode" == '--suffix'* ]]; then
                            echo "if [[ \$$varName != *${separator@Q}${v@Q}${separator@Q}* ]]; then";
                            echo "    $varName=\$$varName${v@Q}";
                            echo "fi";
                        else
                            echo "unknown mode $mode!" 1>&2;
                            exit 1;
                        fi;
                    fi;
                    echo "$varName=\${$varName#${separator@Q}}";
                    echo "$varName=\${$varName%${separator@Q}}";
                    echo "export $varName"
                } >> "$wrapper";
            done;
            IFS=$old_ifs;
        fi;
        if (( reenableGlob )); then
            set +o noglob;
        fi
    };
    mkdir -p "$(dirname "$wrapper")";
    echo "#! /nix/store/mm0pa3z7kk6jh1i9rkxqxjqmd8h1qpxf-bash-5.2p37/bin/bash -e" > "$wrapper";
    params=("$@");
    for ((n = 2; n < ${#params[*]}; n += 1))
    do
        p="${params[$n]}";
        if [[ "$p" == "--set" ]]; then
            varName="${params[$((n + 1))]}";
            value="${params[$((n + 2))]}";
            n=$((n + 2));
            echo "export $varName=${value@Q}" >> "$wrapper";
        else
            if [[ "$p" == "--set-default" ]]; then
                varName="${params[$((n + 1))]}";
                value="${params[$((n + 2))]}";
                n=$((n + 2));
                echo "export $varName=\${$varName-${value@Q}}" >> "$wrapper";
            else
                if [[ "$p" == "--unset" ]]; then
                    varName="${params[$((n + 1))]}";
                    n=$((n + 1));
                    echo "unset $varName" >> "$wrapper";
                else
                    if [[ "$p" == "--chdir" ]]; then
                        dir="${params[$((n + 1))]}";
                        n=$((n + 1));
                        echo "cd ${dir@Q}" >> "$wrapper";
                    else
                        if [[ "$p" == "--run" ]]; then
                            command="${params[$((n + 1))]}";
                            n=$((n + 1));
                            echo "$command" >> "$wrapper";
                        else
                            if [[ ( "$p" == "--suffix" ) || ( "$p" == "--prefix" ) ]]; then
                                varName="${params[$((n + 1))]}";
                                separator="${params[$((n + 2))]}";
                                value="${params[$((n + 3))]}";
                                n=$((n + 3));
                                addValue "$p" "$varName" "$separator" "$value";
                            else
                                if [[ ( "$p" == "--suffix-each" ) || ( "$p" == "--prefix-each" ) ]]; then
                                    varName="${params[$((n + 1))]}";
                                    separator="${params[$((n + 2))]}";
                                    values="${params[$((n + 3))]}";
                                    n=$((n + 3));
                                    for value in $values;
                                    do
                                        addValue "$p" "$varName" "$separator" "$value";
                                    done;
                                else
                                    if [[ ( "$p" == "--suffix-contents" ) || ( "$p" == "--prefix-contents" ) ]]; then
                                        varName="${params[$((n + 1))]}";
                                        separator="${params[$((n + 2))]}";
                                        fileNames="${params[$((n + 3))]}";
                                        n=$((n + 3));
                                        for fileName in $fileNames;
                                        do
                                            contents="$(cat "$fileName")";
                                            addValue "$p" "$varName" "$separator" "$contents";
                                        done;
                                    else
                                        if [[ "$p" == "--add-flags" ]]; then
                                            flags="${params[$((n + 1))]}";
                                            n=$((n + 1));
                                            flagsBefore="${flagsBefore-} $flags";
                                        else
                                            if [[ "$p" == "--append-flags" ]]; then
                                                flags="${params[$((n + 1))]}";
                                                n=$((n + 1));
                                                flagsAfter="${flagsAfter-} $flags";
                                            else
                                                if [[ "$p" == "--argv0" ]]; then
                                                    argv0="${params[$((n + 1))]}";
                                                    n=$((n + 1));
                                                else
                                                    if [[ "$p" == "--inherit-argv0" ]]; then
                                                        argv0='$0';
                                                    else
                                                        if [[ "$p" == "--resolve-argv0" ]]; then
                                                            resolve_argv0=1;
                                                        else
                                                            die "makeWrapper doesn't understand the arg $p";
                                                        fi;
                                                    fi;
                                                fi;
                                            fi;
                                        fi;
                                    fi;
                                fi;
                            fi;
                        fi;
                    fi;
                fi;
            fi;
        fi;
    done;
    echo exec ${argv0:+-a \"$argv0\"} \""$original"\" "${flagsBefore-}" '"$@"' "${flagsAfter-}" >> "$wrapper";
    chmod +x "$wrapper"
}
makeWrapper ()
{
 
    makeShellWrapper "$@"
}
mapOffset ()
{
 
    local -r inputOffset="$1";
    local -n outputOffset="$2";
    if (( inputOffset <= 0 )); then
        outputOffset=$((inputOffset + hostOffset));
    else
        outputOffset=$((inputOffset - 1 + targetOffset));
    fi
}
mesonCheckPhase ()
{
 
    runHook preCheck;
    local flagsArray=();
    concatTo flagsArray mesonCheckFlags mesonCheckFlagsArray;
    echoCmd 'mesonCheckPhase flags' "${flagsArray[@]}";
    meson test --no-rebuild --print-errorlogs "${flagsArray[@]}";
    runHook postCheck
}
mesonConfigurePhase ()
{
 
    runHook preConfigure;
    local flagsArray=();
    if [ -z "${dontAddPrefix-}" ]; then
        flagsArray+=("--prefix=$prefix");
    fi;
    flagsArray+=("--libdir=${!outputLib}/lib" "--libexecdir=${!outputLib}/libexec" "--bindir=${!outputBin}/bin" "--sbindir=${!outputBin}/sbin" "--includedir=${!outputInclude}/include" "--mandir=${!outputMan}/share/man" "--infodir=${!outputInfo}/share/info" "--localedir=${!outputLib}/share/locale" "-Dauto_features=${mesonAutoFeatures:-enabled}" "-Dwrap_mode=${mesonWrapMode:-nodownload}" "--buildtype=${mesonBuildType:-plain}");
    concatTo flagsArray mesonFlags mesonFlagsArray;
    echoCmd 'mesonConfigurePhase flags' "${flagsArray[@]}";
    meson setup build "${flagsArray[@]}";
    cd build || { 
        echoCmd 'mesonConfigurePhase' "could not cd to build";
        exit 1
    };
    if ! [[ -v enableParallelBuilding ]]; then
        enableParallelBuilding=1;
        echoCmd 'mesonConfigurePhase' "enabled parallel building";
    fi;
    if [[ ${checkPhase-ninjaCheckPhase} = ninjaCheckPhase && -z $dontUseMesonCheck ]]; then
        checkPhase=mesonCheckPhase;
    fi;
    if [[ ${installPhase-ninjaInstallPhase} = ninjaInstallPhase && -z $dontUseMesonInstall ]]; then
        installPhase=mesonInstallPhase;
    fi;
    runHook postConfigure
}
mesonInstallPhase ()
{
 
    runHook preInstall;
    local flagsArray=();
    if [[ -n "$mesonInstallTags" ]]; then
        flagsArray+=("--tags" "$(concatStringsSep "," mesonInstallTags)");
    fi;
    concatTo flagsArray mesonInstallFlags mesonInstallFlagsArray;
    echoCmd 'mesonInstallPhase flags' "${flagsArray[@]}";
    meson install --no-rebuild "${flagsArray[@]}";
    runHook postInstall
}
moveToOutput ()
{
 
    local patt="$1";
    local dstOut="$2";
    local output;
    for output in $(getAllOutputNames);
    do
        if [ "${!output}" = "$dstOut" ]; then
            continue;
        fi;
        local srcPath;
        for srcPath in "${!output}"/$patt;
        do
            if [ ! -e "$srcPath" ] && [ ! -L "$srcPath" ]; then
                continue;
            fi;
            if [ "$dstOut" = REMOVE ]; then
                echo "Removing $srcPath";
                rm -r "$srcPath";
            else
                local dstPath="$dstOut${srcPath#${!output}}";
                echo "Moving $srcPath to $dstPath";
                if [ -d "$dstPath" ] && [ -d "$srcPath" ]; then
                    rmdir "$srcPath" --ignore-fail-on-non-empty;
                    if [ -d "$srcPath" ]; then
                        mv -t "$dstPath" "$srcPath"/*;
                        rmdir "$srcPath";
                    fi;
                else
                    mkdir -p "$(readlink -m "$dstPath/..")";
                    mv "$srcPath" "$dstPath";
                fi;
            fi;
            local srcParent="$(readlink -m "$srcPath/..")";
            if [ -n "$(find "$srcParent" -maxdepth 0 -type d -empty 2> /dev/null)" ]; then
                echo "Removing empty $srcParent/ and (possibly) its parents";
                rmdir -p --ignore-fail-on-non-empty "$srcParent" 2> /dev/null || true;
            fi;
        done;
    done
}
ninjaBuildPhase ()
{
 
    runHook preBuild;
    local buildCores=1;
    if [ "${enableParallelBuilding-1}" ]; then
        buildCores="$NIX_BUILD_CORES";
    fi;
    local flagsArray=("-j$buildCores");
    concatTo flagsArray ninjaFlags ninjaFlagsArray;
    echoCmd 'build flags' "${flagsArray[@]}";
    TERM=dumb ninja "${flagsArray[@]}";
    runHook postBuild
}
ninjaCheckPhase ()
{
 
    runHook preCheck;
    if [ -z "${checkTarget:-}" ]; then
        if ninja -t query test > /dev/null 2>&1; then
            checkTarget="test";
        fi;
    fi;
    if [ -z "${checkTarget:-}" ]; then
        echo "no test target found in ninja, doing nothing";
    else
        local buildCores=1;
        if [ "${enableParallelChecking-1}" ]; then
            buildCores="$NIX_BUILD_CORES";
        fi;
        local flagsArray=("-j$buildCores");
        concatTo flagsArray ninjaFlags ninjaFlagsArray checkTarget;
        echoCmd 'check flags' "${flagsArray[@]}";
        TERM=dumb ninja "${flagsArray[@]}";
    fi;
    runHook postCheck
}
ninjaInstallPhase ()
{
 
    runHook preInstall;
    local buildCores=1;
    if [ "${enableParallelInstalling-1}" ]; then
        buildCores="$NIX_BUILD_CORES";
    fi;
    local flagsArray=("-j$buildCores");
    concatTo flagsArray ninjaFlags ninjaFlagsArray installTargets=install;
    echoCmd 'install flags' "${flagsArray[@]}";
    TERM=dumb ninja "${flagsArray[@]}";
    runHook postInstall
}
nixChattyLog ()
{
 
    if [[ -z ${NIX_LOG_FD-} ]] || [[ ${NIX_DEBUG:-0} -lt 5 ]]; then
        return;
    fi;
    printf "%s\n" "$*" >&"$NIX_LOG_FD"
}
nixDebugLog ()
{
 
    if [[ -z ${NIX_LOG_FD-} ]] || [[ ${NIX_DEBUG:-0} -lt 6 ]]; then
        return;
    fi;
    printf "%s\n" "$*" >&"$NIX_LOG_FD"
}
nixErrorLog ()
{
 
    if [[ -z ${NIX_LOG_FD-} ]] || [[ ${NIX_DEBUG:-0} -lt 0 ]]; then
        return;
    fi;
    printf "%s\n" "$*" >&"$NIX_LOG_FD"
}
nixInfoLog ()
{
 
    if [[ -z ${NIX_LOG_FD-} ]] || [[ ${NIX_DEBUG:-0} -lt 3 ]]; then
        return;
    fi;
    printf "%s\n" "$*" >&"$NIX_LOG_FD"
}
nixNoticeLog ()
{
 
    if [[ -z ${NIX_LOG_FD-} ]] || [[ ${NIX_DEBUG:-0} -lt 2 ]]; then
        return;
    fi;
    printf "%s\n" "$*" >&"$NIX_LOG_FD"
}
nixTalkativeLog ()
{
 
    if [[ -z ${NIX_LOG_FD-} ]] || [[ ${NIX_DEBUG:-0} -lt 4 ]]; then
        return;
    fi;
    printf "%s\n" "$*" >&"$NIX_LOG_FD"
}
nixVomitLog ()
{
 
    if [[ -z ${NIX_LOG_FD-} ]] || [[ ${NIX_DEBUG:-0} -lt 7 ]]; then
        return;
    fi;
    printf "%s\n" "$*" >&"$NIX_LOG_FD"
}
nixWarnLog ()
{
 
    if [[ -z ${NIX_LOG_FD-} ]] || [[ ${NIX_DEBUG:-0} -lt 1 ]]; then
        return;
    fi;
    printf "%s\n" "$*" >&"$NIX_LOG_FD"
}
patchELF ()
{
 
    local dir="$1";
    [ -e "$dir" ] || return 0;
    echo "shrinking RPATHs of ELF executables and libraries in $dir";
    local i;
    while IFS= read -r -d '' i; do
        if [[ "$i" =~ .build-id ]]; then
            continue;
        fi;
        if ! isELF "$i"; then
            continue;
        fi;
        echo "shrinking $i";
        patchelf --shrink-rpath "$i" || true;
    done < <(find "$dir" -type f -print0)
}
patchPhase ()
{
 
    runHook prePatch;
    local -a patchesArray;
    concatTo patchesArray patches;
    for i in "${patchesArray[@]}";
    do
        echo "applying patch $i";
        local uncompress=cat;
        case "$i" in 
            *.gz)
                uncompress="gzip -d"
            ;;
            *.bz2)
                uncompress="bzip2 -d"
            ;;
            *.xz)
                uncompress="xz -d"
            ;;
            *.lzma)
                uncompress="lzma -d"
            ;;
        esac;
        local -a flagsArray;
        concatTo flagsArray patchFlags=-p1;
        $uncompress < "$i" 2>&1 | patch "${flagsArray[@]}";
    done;
    runHook postPatch
}
patchPythonScript ()
{
 
    local f="$1";
    sed -i "$f" -re '1 {
  :r
  /\\$|,$/{N;br}
  /__future__|^ |^ *(#.*)?$/{n;br}
  /^[a-z]?'"'''"'/ {
  /'"'''"''"'''"'|'"'''"'.*'"'''"'/{n;br}
  :q1; n; /^'"'''"'/{n;br}; /'"'''"'/{n;br}; bq1
}
/^[a-z]?"""/ {
  /""""""|""".*"""/{n;br}
  :q2; n; /^"""/{n;br}; /"""/{n;br}; bq2
}
/^[a-z]?"/ {
  /""|".*[^\\]"/{n;br}
  :q3; n; /^"/{n;br}; /[^\\]"/{n;br}; bq3
}
/^[a-z]?'"'"'/ {
  /'"'"''"'"'|'"'"'.*[^\\]'"'"'/{n;br}
  :q4; n; /^'"'"'/{n;br}; /[^\\]'"'"'/{n;br}; bq4
}

  /^[^# ]/i import sys;import site;import functools;sys.argv[0] = '"'$(readlink -f "$f")'"';functools.reduce(lambda k, p: site.addsitedir(p, k), ['"$([ -n "$program_PYTHONPATH" ] && ( echo "'$program_PYTHONPATH'" | sed "s|:|','|g" ) || true)"'], site._init_pathinfo());
}
'
}
patchShebangs ()
{
 
    local pathName;
    local update;
    while [[ $# -gt 0 ]]; do
        case "$1" in 
            --host)
                pathName=HOST_PATH;
                shift
            ;;
            --build)
                pathName=PATH;
                shift
            ;;
            --update)
                update=true;
                shift
            ;;
            --)
                shift;
                break
            ;;
            -* | --*)
                echo "Unknown option $1 supplied to patchShebangs" 1>&2;
                return 1
            ;;
            *)
                break
            ;;
        esac;
    done;
    echo "patching script interpreter paths in $@";
    local f;
    local oldPath;
    local newPath;
    local arg0;
    local args;
    local oldInterpreterLine;
    local newInterpreterLine;
    if [[ $# -eq 0 ]]; then
        echo "No arguments supplied to patchShebangs" 1>&2;
        return 0;
    fi;
    local f;
    while IFS= read -r -d '' f; do
        isScript "$f" || continue;
        read -r oldInterpreterLine < "$f" || [ "$oldInterpreterLine" ];
        read -r oldPath arg0 args <<< "${oldInterpreterLine:2}";
        if [[ -z "${pathName:-}" ]]; then
            if [[ -n $strictDeps && $f == "$NIX_STORE"* ]]; then
                pathName=HOST_PATH;
            else
                pathName=PATH;
            fi;
        fi;
        if [[ "$oldPath" == *"/bin/env" ]]; then
            if [[ $arg0 == "-S" ]]; then
                arg0=${args%% *};
                args=${args#* };
                newPath="$(PATH="${!pathName}" type -P "env" || true)";
                args="-S $(PATH="${!pathName}" type -P "$arg0" || true) $args";
            else
                if [[ $arg0 == "-"* || $arg0 == *"="* ]]; then
                    echo "$f: unsupported interpreter directive \"$oldInterpreterLine\" (set dontPatchShebangs=1 and handle shebang patching yourself)" 1>&2;
                    exit 1;
                else
                    newPath="$(PATH="${!pathName}" type -P "$arg0" || true)";
                fi;
            fi;
        else
            if [[ -z $oldPath ]]; then
                oldPath="/bin/sh";
            fi;
            newPath="$(PATH="${!pathName}" type -P "$(basename "$oldPath")" || true)";
            args="$arg0 $args";
        fi;
        newInterpreterLine="$newPath $args";
        newInterpreterLine=${newInterpreterLine%${newInterpreterLine##*[![:space:]]}};
        if [[ -n "$oldPath" && ( "$update" == true || "${oldPath:0:${#NIX_STORE}}" != "$NIX_STORE" ) ]]; then
            if [[ -n "$newPath" && "$newPath" != "$oldPath" ]]; then
                echo "$f: interpreter directive changed from \"$oldInterpreterLine\" to \"$newInterpreterLine\"";
                escapedInterpreterLine=${newInterpreterLine//\\/\\\\};
                timestamp=$(stat --printf "%y" "$f");
                sed -i -e "1 s|.*|#\!$escapedInterpreterLine|" "$f";
                touch --date "$timestamp" "$f";
            fi;
        fi;
    done < <(find "$@" -type f -perm -0100 -print0)
}
patchShebangsAuto ()
{
 
    if [[ -z "${dontPatchShebangs-}" && -e "$prefix" ]]; then
        if [[ "$output" != out && "$output" = "$outputDev" ]]; then
            patchShebangs --build "$prefix";
        else
            patchShebangs --host "$prefix";
        fi;
    fi
}
pkgConfigWrapper_addPkgConfigPath ()
{
 
    local role_post;
    getHostRoleEnvHook;
    addToSearchPath "PKG_CONFIG_PATH${role_post}" "$1/lib/pkgconfig";
    addToSearchPath "PKG_CONFIG_PATH${role_post}" "$1/share/pkgconfig"
}
prependToVar ()
{
 
    local -n nameref="$1";
    local useArray type;
    if [ -n "$__structuredAttrs" ]; then
        useArray=true;
    else
        useArray=false;
    fi;
    if type=$(declare -p "$1" 2> /dev/null); then
        case "${type#* }" in 
            -A*)
                echo "prependToVar(): ERROR: trying to use prependToVar on an associative array." 1>&2;
                return 1
            ;;
            -a*)
                useArray=true
            ;;
            *)
                useArray=false
            ;;
        esac;
    fi;
    shift;
    if $useArray; then
        nameref=("$@" ${nameref+"${nameref[@]}"});
    else
        nameref="$* ${nameref-}";
    fi
}
printLines ()
{
 
    (( "$#" > 0 )) || return 0;
    printf '%s\n' "$@"
}
printWords ()
{
 
    (( "$#" > 0 )) || return 0;
    printf '%s ' "$@"
}
pypaBuildPhase ()
{
 
    echo "Executing pypaBuildPhase";
    runHook preBuild;
    echo "Creating a wheel...";
    /nix/store/a23df9vahmg0z6gn9alcnqp32x8kd9lm-python3.12-build-1.2.2/bin/pyproject-build --no-isolation --outdir dist/ --wheel $pypaBuildFlags;
    echo "Finished creating a wheel...";
    runHook postBuild;
    echo "Finished executing pypaBuildPhase"
}
pypaInstallPhase ()
{
 
    echo "Executing pypaInstallPhase";
    runHook preInstall;
    pushd dist > /dev/null;
    for wheel in *.whl;
    do
        /nix/store/901c80rlps5q05bnjk1sj4zaz5k736nc-python3-3.12.7/bin/python3.12 -m installer --prefix "$out" "$wheel";
        echo "Successfully installed $wheel";
    done;
    popd > /dev/null;
    export PYTHONPATH="$out/lib/python3.12/site-packages:$PYTHONPATH";
    runHook postInstall;
    echo "Finished executing pypaInstallPhase"
}
pythonCatchConflictsPhase ()
{
 
    PYTHONPATH="@setuptools@/lib/python3.12/site-packages:$PYTHONPATH" /nix/store/901c80rlps5q05bnjk1sj4zaz5k736nc-python3-3.12.7/bin/python3.12 /nix/store/ssxs0kj7akqn4yjmin0y3j7gpr0kf0fk-catch_conflicts.py
}
pythonImportsCheckPhase ()
{
 
    echo "Executing pythonImportsCheckPhase";
    if [ -n "$pythonImportsCheck" ]; then
        echo "Check whether the following modules can be imported: $pythonImportsCheck";
        pythonImportsCheckOutput=$out;
        if [ -n "$python" ]; then
            echo "Using python specific output \$python for imports check";
            pythonImportsCheckOutput=$python;
        fi;
        export PYTHONPATH="$pythonImportsCheckOutput/lib/python3.12/site-packages:$PYTHONPATH";
        ( cd $pythonImportsCheckOutput && /nix/store/901c80rlps5q05bnjk1sj4zaz5k736nc-python3-3.12.7/bin/python3.12 -c 'import os; import importlib; list(map(lambda mod: importlib.import_module(mod), os.environ["pythonImportsCheck"].split()))' );
    fi
}
pythonNamespacesHook ()
{
 
    echo "Executing pythonNamespacesHook";
    for namespace in ${pythonNamespaces[@]};
    do
        echo "Enforcing PEP420 namespace: ${namespace}";
        IFS='.' read -ra pathSegments <<< $namespace;
        constructedPath=$out/lib/python3.12/site-packages;
        for pathSegment in ${pathSegments[@]};
        do
            constructedPath=${constructedPath}/${pathSegment};
            pathToRemove=${constructedPath}/__init__.py;
            pycachePath=${constructedPath}/__pycache__/;
            if [ -f "$pathToRemove" ]; then
                rm -v "$pathToRemove";
            fi;
            if [ -d "${constructedPath}/../" -a -z ${dontRemovePth-} ]; then
                /nix/store/psjqqbj19n3fqssn38hgz4cv7b7a9alp-findutils-4.10.0/bin/find ${constructedPath}/../ -name '*-nspkg.pth' -exec rm -v "{}" +;
            fi;
            if [ -d "$pycachePath" ]; then
                /nix/store/psjqqbj19n3fqssn38hgz4cv7b7a9alp-findutils-4.10.0/bin/find "$pycachePath" -name '__init__*' -exec rm -v "{}" +;
            fi;
        done;
    done;
    echo "Finished executing pythonNamespacesHook"
}
pythonOutputDistPhase ()
{
 
    echo "Executing pythonOutputDistPhase";
    if [[ -d dist ]]; then
        mv "dist" "$dist";
    else
        cat 1>&2 <<EOF
The build contains no ./dist directory.
If this project is not setuptools-based, pass

  format = "other";

to buildPythonApplication/buildPythonPackage or another appropriate value as described here:

  https://nixos.org/manual/nixpkgs/stable/#buildpythonpackage-function
EOF

        false;
    fi
    echo "Finished executing pythonOutputDistPhase"
}
pythonRelaxDepsHook ()
{
 
    pushd dist;
    local -r unpack_dir="unpacked";
    local -r metadata_file="$unpack_dir/*/*.dist-info/METADATA";
    for wheel in *".whl";
    do
        PYTHONPATH="/nix/store/zmbqi7bnv6sfhdnachi6mgl5cb2vxw9k-python3.12-wheel-0.44.0/lib/python3.12/site-packages:$PYTHONPATH" /nix/store/901c80rlps5q05bnjk1sj4zaz5k736nc-python3-3.12.7/bin/python3.12 -m wheel unpack --dest "$unpack_dir" "$wheel";
        rm -rf "$wheel";
        _pythonRelaxDeps $metadata_file;
        _pythonRemoveDeps $metadata_file;
        if (("${NIX_DEBUG:-0}" >= 1)); then
            echo "pythonRelaxDepsHook: resulting METADATA for '$wheel':";
            cat $metadata_file;
        fi;
        PYTHONPATH="/nix/store/zmbqi7bnv6sfhdnachi6mgl5cb2vxw9k-python3.12-wheel-0.44.0/lib/python3.12/site-packages:$PYTHONPATH" /nix/store/901c80rlps5q05bnjk1sj4zaz5k736nc-python3-3.12.7/bin/python3.12 -m wheel pack "$unpack_dir/"*;
    done;
    rm -rf "$unpack_dir";
    popd
}
pythonRemoveBinBytecodePhase ()
{
 
    if [ -d "$out/bin" ]; then
        rm -rf "$out/bin/__pycache__";
        find "$out/bin" -type f -name "*.pyc" -delete;
    fi
}
pythonRemoveTestsDir ()
{
 
    echo "Executing pythonRemoveTestsDir";
    rm -rf $out/lib/python3.12/site-packages/tests;
    rm -rf $out/lib/python3.12/site-packages/test;
    echo "Finished executing pythonRemoveTestsDir"
}
pythonRuntimeDepsCheckHook ()
{
 
    echo "Executing pythonRuntimeDepsCheck";
    export PYTHONPATH="$out/lib/python3.12/site-packages:$PYTHONPATH";
    for wheel in dist/*.whl;
    do
        echo "Checking runtime dependencies for $(basename $wheel)";
        /nix/store/901c80rlps5q05bnjk1sj4zaz5k736nc-python3-3.12.7/bin/python3.12 /nix/store/gdxd1rn8zgjjw08ijghvpazj18n4sjl6-python-runtime-deps-check-hook.py "$wheel";
    done;
    echo "Finished executing pythonRuntimeDepsCheck"
}
recordPropagatedDependencies ()
{
 
    declare -ra flatVars=(depsBuildBuildPropagated propagatedNativeBuildInputs depsBuildTargetPropagated depsHostHostPropagated propagatedBuildInputs depsTargetTargetPropagated);
    declare -ra flatFiles=("${propagatedBuildDepFiles[@]}" "${propagatedHostDepFiles[@]}" "${propagatedTargetDepFiles[@]}");
    local propagatedInputsIndex;
    for propagatedInputsIndex in "${!flatVars[@]}";
    do
        local propagatedInputsSlice="${flatVars[$propagatedInputsIndex]}[@]";
        local propagatedInputsFile="${flatFiles[$propagatedInputsIndex]}";
        [[ -n "${!propagatedInputsSlice}" ]] || continue;
        mkdir -p "${!outputDev}/nix-support";
        printWords ${!propagatedInputsSlice} > "${!outputDev}/nix-support/$propagatedInputsFile";
    done
}
runHook ()
{
 
    local hookName="$1";
    shift;
    local hooksSlice="${hookName%Hook}Hooks[@]";
    local hook;
    for hook in "_callImplicitHook 0 $hookName" ${!hooksSlice+"${!hooksSlice}"};
    do
        _logHook "$hookName" "$hook" "$@";
        _eval "$hook" "$@";
    done;
    return 0
}
runOneHook ()
{
 
    local hookName="$1";
    shift;
    local hooksSlice="${hookName%Hook}Hooks[@]";
    local hook ret=1;
    for hook in "_callImplicitHook 1 $hookName" ${!hooksSlice+"${!hooksSlice}"};
    do
        _logHook "$hookName" "$hook" "$@";
        if _eval "$hook" "$@"; then
            ret=0;
            break;
        fi;
    done;
    return "$ret"
}
runPhase ()
{
 
    local curPhase="$*";
    if [[ "$curPhase" = unpackPhase && -n "${dontUnpack:-}" ]]; then
        return;
    fi;
    if [[ "$curPhase" = patchPhase && -n "${dontPatch:-}" ]]; then
        return;
    fi;
    if [[ "$curPhase" = configurePhase && -n "${dontConfigure:-}" ]]; then
        return;
    fi;
    if [[ "$curPhase" = buildPhase && -n "${dontBuild:-}" ]]; then
        return;
    fi;
    if [[ "$curPhase" = checkPhase && -z "${doCheck:-}" ]]; then
        return;
    fi;
    if [[ "$curPhase" = installPhase && -n "${dontInstall:-}" ]]; then
        return;
    fi;
    if [[ "$curPhase" = fixupPhase && -n "${dontFixup:-}" ]]; then
        return;
    fi;
    if [[ "$curPhase" = installCheckPhase && -z "${doInstallCheck:-}" ]]; then
        return;
    fi;
    if [[ "$curPhase" = distPhase && -z "${doDist:-}" ]]; then
        return;
    fi;
    showPhaseHeader "$curPhase";
    dumpVars;
    local startTime endTime;
    startTime=$(date +"%s");
    eval "${!curPhase:-$curPhase}";
    endTime=$(date +"%s");
    showPhaseFooter "$curPhase" "$startTime" "$endTime";
    if [ "$curPhase" = unpackPhase ]; then
        [ -n "${sourceRoot:-}" ] && chmod +x -- "${sourceRoot}";
        cd -- "${sourceRoot:-.}";
    fi
}
showPhaseFooter ()
{
 
    local phase="$1";
    local startTime="$2";
    local endTime="$3";
    local delta=$(( endTime - startTime ));
    (( delta < 30 )) && return;
    local H=$((delta/3600));
    local M=$((delta%3600/60));
    local S=$((delta%60));
    echo -n "$phase completed in ";
    (( H > 0 )) && echo -n "$H hours ";
    (( M > 0 )) && echo -n "$M minutes ";
    echo "$S seconds"
}
showPhaseHeader ()
{
 
    local phase="$1";
    echo "Running phase: $phase";
    if [[ -z ${NIX_LOG_FD-} ]]; then
        return;
    fi;
    printf "@nix { \"action\": \"setPhase\", \"phase\": \"%s\" }\n" "$phase" >&"$NIX_LOG_FD"
}
stripDirs ()
{
 
    local cmd="$1";
    local ranlibCmd="$2";
    local paths="$3";
    local stripFlags="$4";
    local excludeFlags=();
    local pathsNew=;
    [ -z "$cmd" ] && echo "stripDirs: Strip command is empty" 1>&2 && exit 1;
    [ -z "$ranlibCmd" ] && echo "stripDirs: Ranlib command is empty" 1>&2 && exit 1;
    local pattern;
    if [ -n "${stripExclude:-}" ]; then
        for pattern in "${stripExclude[@]}";
        do
            excludeFlags+=(-a '!' '(' -name "$pattern" -o -wholename "$prefix/$pattern" ')');
        done;
    fi;
    local p;
    for p in ${paths};
    do
        if [ -e "$prefix/$p" ]; then
            pathsNew="${pathsNew} $prefix/$p";
        fi;
    done;
    paths=${pathsNew};
    if [ -n "${paths}" ]; then
        echo "stripping (with command $cmd and flags $stripFlags) in $paths";
        local striperr;
        striperr="$(mktemp --tmpdir="$TMPDIR" 'striperr.XXXXXX')";
        find $paths -type f "${excludeFlags[@]}" -a '!' -path "$prefix/lib/debug/*" -printf '%D-%i,%p\0' | sort -t, -k1,1 -u -z | cut -d, -f2- -z | xargs -r -0 -n1 -P "$NIX_BUILD_CORES" -- $cmd $stripFlags 2> "$striperr" || exit_code=$?;
        [[ "$exit_code" = 123 || -z "$exit_code" ]] || ( cat "$striperr" 1>&2 && exit 1 );
        rm "$striperr";
        find $paths -name '*.a' -type f -exec $ranlibCmd '{}' \; 2> /dev/null;
    fi
}
stripHash ()
{
 
    local strippedName casematchOpt=0;
    strippedName="$(basename -- "$1")";
    shopt -q nocasematch && casematchOpt=1;
    shopt -u nocasematch;
    if [[ "$strippedName" =~ ^[a-z0-9]{32}- ]]; then
        echo "${strippedName:33}";
    else
        echo "$strippedName";
    fi;
    if (( casematchOpt )); then
        shopt -s nocasematch;
    fi
}
substitute ()
{
 
    local input="$1";
    local output="$2";
    shift 2;
    if [ ! -f "$input" ]; then
        echo "substitute(): ERROR: file '$input' does not exist" 1>&2;
        return 1;
    fi;
    local content;
    consumeEntire content < "$input";
    if [ -e "$output" ]; then
        chmod +w "$output";
    fi;
    substituteStream content "file '$input'" "$@" > "$output"
}
substituteAll ()
{
 
    local input="$1";
    local output="$2";
    local -a args=();
    _allFlags;
    substitute "$input" "$output" "${args[@]}"
}
substituteAllInPlace ()
{
 
    local fileName="$1";
    shift;
    substituteAll "$fileName" "$fileName" "$@"
}
substituteAllStream ()
{
 
    local -a args=();
    _allFlags;
    substituteStream "$1" "$2" "${args[@]}"
}
substituteInPlace ()
{
 
    local -a fileNames=();
    for arg in "$@";
    do
        if [[ "$arg" = "--"* ]]; then
            break;
        fi;
        fileNames+=("$arg");
        shift;
    done;
    for file in "${fileNames[@]}";
    do
        substitute "$file" "$file" "$@";
    done
}
substituteStream ()
{
 
    local var=$1;
    local description=$2;
    shift 2;
    while (( "$#" )); do
        local replace_mode="$1";
        case "$1" in 
            --replace)
                if ! "$_substituteStream_has_warned_replace_deprecation"; then
                    echo "substituteStream() in derivation $name: WARNING: '--replace' is deprecated, use --replace-{fail,warn,quiet}. ($description)" 1>&2;
                    _substituteStream_has_warned_replace_deprecation=true;
                fi;
                replace_mode='--replace-warn'
            ;&
            --replace-quiet | --replace-warn | --replace-fail)
                pattern="$2";
                replacement="$3";
                shift 3;
                local savedvar;
                savedvar="${!var}";
                eval "$var"'=${'"$var"'//"$pattern"/"$replacement"}';
                if [ "$pattern" != "$replacement" ]; then
                    if [ "${!var}" == "$savedvar" ]; then
                        if [ "$replace_mode" == --replace-warn ]; then
                            printf "substituteStream() in derivation $name: WARNING: pattern %q doesn't match anything in %s\n" "$pattern" "$description" 1>&2;
                        else
                            if [ "$replace_mode" == --replace-fail ]; then
                                printf "substituteStream() in derivation $name: ERROR: pattern %q doesn't match anything in %s\n" "$pattern" "$description" 1>&2;
                                return 1;
                            fi;
                        fi;
                    fi;
                fi
            ;;
            --subst-var)
                local varName="$2";
                shift 2;
                if ! [[ "$varName" =~ ^[a-zA-Z_][a-zA-Z0-9_]*$ ]]; then
                    echo "substituteStream() in derivation $name: ERROR: substitution variables must be valid Bash names, \"$varName\" isn't." 1>&2;
                    return 1;
                fi;
                if [ -z ${!varName+x} ]; then
                    echo "substituteStream() in derivation $name: ERROR: variable \$$varName is unset" 1>&2;
                    return 1;
                fi;
                pattern="@$varName@";
                replacement="${!varName}";
                eval "$var"'=${'"$var"'//"$pattern"/"$replacement"}'
            ;;
            --subst-var-by)
                pattern="@$2@";
                replacement="$3";
                eval "$var"'=${'"$var"'//"$pattern"/"$replacement"}';
                shift 3
            ;;
            *)
                echo "substituteStream() in derivation $name: ERROR: Invalid command line argument: $1" 1>&2;
                return 1
            ;;
        esac;
    done;
    printf "%s" "${!var}"
}
sysconfigdataHook ()
{
 
    if [ "$1" = '/nix/store/901c80rlps5q05bnjk1sj4zaz5k736nc-python3-3.12.7' ]; then
        export _PYTHON_HOST_PLATFORM='linux-x86_64';
        export _PYTHON_SYSCONFIGDATA_NAME='_sysconfigdata__linux_x86_64-linux-gnu';
    fi
}
toPythonPath ()
{
 
    local paths="$1";
    local result=;
    for i in $paths;
    do
        p="$i/lib/python3.12/site-packages";
        result="${result}${result:+:}$p";
    done;
    echo $result
}
unpackFile ()
{
 
    curSrc="$1";
    echo "unpacking source archive $curSrc";
    if ! runOneHook unpackCmd "$curSrc"; then
        echo "do not know how to unpack source archive $curSrc";
        exit 1;
    fi
}
unpackPhase ()
{
 
    runHook preUnpack;
    if [ -z "${srcs:-}" ]; then
        if [ -z "${src:-}" ]; then
            echo 'variable $src or $srcs should point to the source';
            exit 1;
        fi;
        srcs="$src";
    fi;
    local -a srcsArray;
    concatTo srcsArray srcs;
    local dirsBefore="";
    for i in *;
    do
        if [ -d "$i" ]; then
            dirsBefore="$dirsBefore $i ";
        fi;
    done;
    for i in "${srcsArray[@]}";
    do
        unpackFile "$i";
    done;
    : "${sourceRoot=}";
    if [ -n "${setSourceRoot:-}" ]; then
        runOneHook setSourceRoot;
    else
        if [ -z "$sourceRoot" ]; then
            for i in *;
            do
                if [ -d "$i" ]; then
                    case $dirsBefore in 
                        *\ $i\ *)

                        ;;
                        *)
                            if [ -n "$sourceRoot" ]; then
                                echo "unpacker produced multiple directories";
                                exit 1;
                            fi;
                            sourceRoot="$i"
                        ;;
                    esac;
                fi;
            done;
        fi;
    fi;
    if [ -z "$sourceRoot" ]; then
        echo "unpacker appears to have produced no directories";
        exit 1;
    fi;
    echo "source root is $sourceRoot";
    if [ "${dontMakeSourcesWritable:-0}" != 1 ]; then
        chmod -R u+w -- "$sourceRoot";
    fi;
    runHook postUnpack
}
updateAutotoolsGnuConfigScriptsPhase ()
{
 
    if [ -n "${dontUpdateAutotoolsGnuConfigScripts-}" ]; then
        return;
    fi;
    for script in config.sub config.guess;
    do
        for f in $(find . -type f -name "$script");
        do
            echo "Updating Autotools / GNU config script to a newer upstream version: $f";
            cp -f "/nix/store/vcwb5qr1yjn3pwbm9gnmvqmn1gwg9a1y-gnu-config-2024-01-01/$script" "$f";
        done;
    done
}
updateSourceDateEpoch ()
{
 
    local path="$1";
    [[ $path == -* ]] && path="./$path";
    local -a res=($(find "$path" -type f -not -newer "$NIX_BUILD_TOP/.." -printf '%T@ %p\0' | sort -n --zero-terminated | tail -n1 --zero-terminated | head -c -1));
    local time="${res[0]//\.[0-9]*/}";
    local newestFile="${res[1]}";
    if [ "${time:-0}" -gt "$SOURCE_DATE_EPOCH" ]; then
        echo "setting SOURCE_DATE_EPOCH to timestamp $time of file $newestFile";
        export SOURCE_DATE_EPOCH="$time";
        local now="$(date +%s)";
        if [ "$time" -gt $((now - 60)) ]; then
            echo "warning: file $newestFile may be generated; SOURCE_DATE_EPOCH may be non-deterministic";
        fi;
    fi
}
wrapProgram ()
{
 
    wrapProgramShell "$@"
}
wrapProgramShell ()
{
 
    local prog="$1";
    local hidden;
    assertExecutable "$prog";
    hidden="$(dirname "$prog")/.$(basename "$prog")"-wrapped;
    while [ -e "$hidden" ]; do
        hidden="${hidden}_";
    done;
    mv "$prog" "$hidden";
    makeShellWrapper "$hidden" "$prog" --inherit-argv0 "${@:2}"
}
wrapPythonPrograms ()
{
 
    wrapPythonProgramsIn "$out/bin" "$out $pythonPath"
}
wrapPythonProgramsIn ()
{
 
    local dir="$1";
    local pythonPath="$2";
    local f;
    buildPythonPath "$pythonPath";
    if [ -d "$dir" ]; then
        find "$dir" -type f -perm -0100 -print0 | while read -d "" f; do
            if head -n1 "$f" | grep -q '#!.*/env.*\(python\|pypy\)'; then
                sed -i "$f" -e "1 s^.*/env[ ]*\(python\|pypy\)[^ ]*^#!/nix/store/901c80rlps5q05bnjk1sj4zaz5k736nc-python3-3.12.7/bin/python3.12^";
            fi;
            if head -n1 "$f" | grep -q '#!.*'; then
                echo "Rewriting $(head -n 1 $f) to #!/nix/store/901c80rlps5q05bnjk1sj4zaz5k736nc-python3-3.12.7";
                sed -i "$f" -e "1 s^#!/nix/store/901c80rlps5q05bnjk1sj4zaz5k736nc-python3-3.12.7^#!/nix/store/901c80rlps5q05bnjk1sj4zaz5k736nc-python3-3.12.7^";
            fi;
            if head -n1 "$f" | grep -q '/\.\?\(python\|pypy\)'; then
                if echo "$f" | grep -qv EGG-INFO/scripts; then
                    echo "wrapping \`$f'...";
                    patchPythonScript "$f";
                    local -a wrap_args=("$f" --prefix PATH ':' "$program_PATH");
                    if [ -z "$permitUserSite" ]; then
                        wrap_args+=(--set PYTHONNOUSERSITE "true");
                    fi;
                    if [[ "${makeWrapperArgs+defined}" == "defined" && "$(declare -p makeWrapperArgs)" =~ ^'declare -a makeWrapperArgs=' ]]; then
                        local -a user_args=("${makeWrapperArgs[@]}");
                    else
                        local -a user_args="(${makeWrapperArgs:-})";
                    fi;
                    local -a wrapProgramArgs=("${wrap_args[@]}" "${user_args[@]}");
                    wrapProgram "${wrapProgramArgs[@]}";
                fi;
            fi;
        done;
    fi
}
PATH="$PATH${nix_saved_PATH:+:$nix_saved_PATH}"
XDG_DATA_DIRS="$XDG_DATA_DIRS${nix_saved_XDG_DATA_DIRS:+:$nix_saved_XDG_DATA_DIRS}"
export NIX_BUILD_TOP="$(mktemp -d -t nix-shell.XXXXXX)"
export TMP="$NIX_BUILD_TOP"
export TMPDIR="$NIX_BUILD_TOP"
export TEMP="$NIX_BUILD_TOP"
export TEMPDIR="$NIX_BUILD_TOP"
eval "${shellHook:-}"
